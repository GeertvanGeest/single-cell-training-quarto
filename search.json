[
  {
    "objectID": "day3/day3-2_enrichment_analysis.html",
    "href": "day3/day3-2_enrichment_analysis.html",
    "title": "Enrichment analysis",
    "section": "",
    "text": "MSigDB\n\nclusterProfiler vignette\n\nRevigo\nSignaling Pathway Impact Analysis (SPIA)\nOriginal paper on GSEA\n\nSTRING for protein-protein interactions\n\nGO figure! for plotting GO terms and the associated paper\nLet’s select a set of genes that are downregulated in the tumor cells compared to normal:\ntum_down  &lt;- subset(limma_de,\n                    limma_de$logFC &lt; -1 \n                      & limma_de$adj.P.Val &lt;  0.05)\ntum_down_genes &lt;- rownames(tum_down)\nWe can do a Gene Ontology term over-representation analysis based on this set of genes. Make sure you check out the help of this function to understand its arguments:\n?enrichGO\ntum_vs_norm_go &lt;- clusterProfiler::enrichGO(tum_down_genes,\n                                            \"org.Hs.eg.db\",\n                                            keyType = \"SYMBOL\",\n                                            ont = \"BP\",\n                                            minGSSize = 50)\nThe results are stored in the @result slot:\nView(tum_vs_norm_go@result)\nID\nDescription\nGeneRatio\nBgRatio\npvalue\np.adjust\nqvalue\n\n\n\nGO:0140014\nGO:0140014\nmitotic nuclear division\n76/807\n293/18800\n0\n0\n0\n\n\nGO:0007059\nGO:0007059\nchromosome segregation\n82/807\n348/18800\n0\n0\n0\n\n\nGO:0000280\nGO:0000280\nnuclear division\n91/807\n446/18800\n0\n0\n0\n\n\nGO:0000070\nGO:0000070\nmitotic sister chromatid segregation\n57/807\n171/18800\n0\n0\n0\n\n\nGO:0048285\nGO:0048285\norganelle fission\n94/807\n493/18800\n0\n0\n0\n\n\nGO:0000819\nGO:0000819\nsister chromatid segregation\n60/807\n205/18800\n0\n0\n0\nSome GO terms seem redundant because they contain many of the same genes, which is a characteristic of Gene Ontology gene sets. We can simplify this list by removing redundant gene sets:\nenr_go &lt;- clusterProfiler::simplify(tum_vs_norm_go)\nView(enr_go@result)\nID\nDescription\nGeneRatio\nBgRatio\npvalue\np.adjust\nqvalue\n\n\n\nGO:0140014\nGO:0140014\nmitotic nuclear division\n76/807\n293/18800\n0\n0\n0\n\n\nGO:0007059\nGO:0007059\nchromosome segregation\n82/807\n348/18800\n0\n0\n0\n\n\nGO:0000280\nGO:0000280\nnuclear division\n91/807\n446/18800\n0\n0\n0\n\n\nGO:0098813\nGO:0098813\nnuclear chromosome segregation\n69/807\n287/18800\n0\n0\n0\n\n\nGO:0044772\nGO:0044772\nmitotic cell cycle phase transition\n69/807\n440/18800\n0\n0\n0\n\n\nGO:1902850\nGO:1902850\nmicrotubule cytoskeleton organization involved in mitosis\n40/807\n151/18800\n0\n0\n0\nWe can quite easily generate a plot called an enrichment map with the enrichplot package:\nenrichplot::emapplot(enrichplot::pairwise_termsim(enr_go),\n                     showCategory = 30, cex_label_category = 0.5)\nInstead of testing for Gene Ontology terms, we can also test for other gene set collections. For example the Hallmark collection from MSigDB:\ngmt &lt;- msigdbr::msigdbr(species = \"human\", category = \"H\")\nWe can use the function enricher to test for over-representation of any set of genes of the Hallmark collection. We have to include the “universe”, i.e. the full list of background, non significant genes, against which to test for differences in proportions:\ntum_vs_norm_enrich &lt;- clusterProfiler::enricher(gene = tum_down_genes,\n                                                universe = rownames(proB),\n                                                pAdjustMethod = \"BH\",\n                                                pvalueCutoff  = 0.05,\n                                                qvalueCutoff  = 0.05,\n                                                TERM2GENE = gmt[,c(\"gs_name\", \"gene_symbol\")])\nWhen using the genes down-regulated in tumor, among the over-represented Hallmark gene sets, we have HALLMARK_G2M_CHECKPOINT, which includes genes involved in the G2/M checkpoint in the progression through the cell division cycle.\nView(tum_vs_norm_enrich@result[tum_vs_norm_enrich@result$p.adjust &lt; 0.05,])\nID\nDescription\nGeneRatio\nBgRatio\npvalue\np.adjust\nqvalue\n\n\n\nHALLMARK_E2F_TARGETS\nHALLMARK_E2F_TARGETS\nHALLMARK_E2F_TARGETS\n80/344\n195/3866\n0.0000000\n0.0000000\n0.0000000\n\n\nHALLMARK_G2M_CHECKPOINT\nHALLMARK_G2M_CHECKPOINT\nHALLMARK_G2M_CHECKPOINT\n67/344\n188/3866\n0.0000000\n0.0000000\n0.0000000\n\n\nHALLMARK_MITOTIC_SPINDLE\nHALLMARK_MITOTIC_SPINDLE\nHALLMARK_MITOTIC_SPINDLE\n48/344\n197/3866\n0.0000000\n0.0000000\n0.0000000\n\n\nHALLMARK_MYC_TARGETS_V1\nHALLMARK_MYC_TARGETS_V1\nHALLMARK_MYC_TARGETS_V1\n33/344\n194/3866\n0.0001564\n0.0017991\n0.0016468\n\n\nHALLMARK_ESTROGEN_RESPONSE_LATE\nHALLMARK_ESTROGEN_RESPONSE_LATE\nHALLMARK_ESTROGEN_RESPONSE_LATE\n28/344\n166/3866\n0.0005747\n0.0052875\n0.0048398"
  },
  {
    "objectID": "day3/day3-2_enrichment_analysis.html#material",
    "href": "day3/day3-2_enrichment_analysis.html#material",
    "title": "Enrichment analysis",
    "section": "",
    "text": "MSigDB\n\nclusterProfiler vignette\n\nRevigo\nSignaling Pathway Impact Analysis (SPIA)\nOriginal paper on GSEA\n\nSTRING for protein-protein interactions\n\nGO figure! for plotting GO terms and the associated paper"
  },
  {
    "objectID": "day3/day3-2_enrichment_analysis.html#exercises",
    "href": "day3/day3-2_enrichment_analysis.html#exercises",
    "title": "Enrichment analysis",
    "section": "Exercises",
    "text": "Exercises\nLoad the following packages:\n\nlibrary(clusterProfiler)\nlibrary(enrichplot)\n\nIf the FindMarkers or FindAllMarkers functions were used, we obtained a table listing only the significant genes, but we don’t have any information of fold change for the non-significant genes. Therefore, we can use the over-representation analysis which is a threshold-based method. Using our list of significant genes, we can test if any gene set is over-represented among significant genes or not using a test similar to a Fisher test to compare differences in proportions.\nThe clusterProfiler package provides functions for over-representation analysis of Gene Ontology gene sets (among other functions, including functions for actual GSEA) or KEGG gene sets.\nGenes can be labeled using different types of labels, eg symbol, Ensembl ID, Entrez ID. To list the allowed label types use:\n\nBiocManager::install(\"org.Hs.eg.db\", update = FALSE)\nlibrary(org.Hs.eg.db)\nAnnotationDbi::keytypes(org.Hs.eg.db)"
  },
  {
    "objectID": "day3/day3-2_enrichment_analysis.html#about-orgdb",
    "href": "day3/day3-2_enrichment_analysis.html#about-orgdb",
    "title": "Enrichment analysis",
    "section": "About OrgDb",
    "text": "About OrgDb\nFor other organisms, you can find available OrgDbs at bioconductor"
  },
  {
    "objectID": "day3/day3-3_trajectory_analysis.html",
    "href": "day3/day3-3_trajectory_analysis.html",
    "title": "Trajectory analysis",
    "section": "",
    "text": "Download the presentation\n\n\nslingshot vignette\n\nmonocle3"
  },
  {
    "objectID": "day3/day3-3_trajectory_analysis.html#material",
    "href": "day3/day3-3_trajectory_analysis.html#material",
    "title": "Trajectory analysis",
    "section": "",
    "text": "Download the presentation\n\n\nslingshot vignette\n\nmonocle3"
  },
  {
    "objectID": "day3/day3-3_trajectory_analysis.html#exercises",
    "href": "day3/day3-3_trajectory_analysis.html#exercises",
    "title": "Trajectory analysis",
    "section": "Exercises",
    "text": "Exercises\nLoad the following packages:\n\nlibrary(SingleCellExperiment)\nlibrary(scater)\nlibrary(slingshot)\nlibrary(ggplot2)\nlibrary(ggbeeswarm)\nlibrary(Seurat)\n\nTrajectory analysis using Slingshot\n\nThis part uses the Deng dataset\n\nFirst, download the dataset from github within your Terminal tab as on Day 1:\nType the following commands within the Terminal tab:\n\ncd course_data/\nwget https://github.com/hemberg-lab/nrg-paper-figures/raw/master/deng-reads.rds\n\nThen, within R, import the rds file. the ‘Deng’ dataset is an object of class SingleCellExperiment.\n\ndeng_SCE &lt;- readRDS(\"course_data/deng-reads.rds\")\n\nPerform the first steps of the analysis. The deng_SCE object contains cells that were isolated at different stages of mouse embryogenesis, from the zygote stage to the late blastula.\nThe levels of the cell type are in alphabetical order. We now change the level order for plotting in developmental order:\n\ndeng_SCE$cell_type2 &lt;- factor(deng_SCE$cell_type2,\n                              levels = c(\"zy\",\n                                         \"early2cell\",\n                                         \"mid2cell\",\n                                         \"late2cell\",\n                                         \"4cell\",\n                                         \"8cell\",\n                                         \"16cell\",\n                                         \"earlyblast\",\n                                         \"midblast\",\n                                         \"lateblast\"))\n\nWe can run a PCA directly on the object of class SingleCellExperiment with the function runPCA:\n\ndeng_SCE &lt;- scater::runPCA(deng_SCE, ncomponents = 50)\n\nUse the reducedDim function to access the PCA and store the results.\n\npca &lt;- SingleCellExperiment::reducedDim(deng_SCE, \"PCA\")\n\nDescribe how the PCA is stored in a matrix. Why does it have this structure?\n\nhead(pca)\n\n              PC1      PC2       PC3         PC4        PC5        PC6\n16cell   24.79868 62.20826  8.035201 -2.07391816  2.1297390 14.0930954\n16cell.1 28.77121 50.35974 13.607012  0.08664449  0.9454185  3.5987880\n16cell.2 26.67901 61.03875  7.239352 -6.60967794 -1.0775002 11.8876579\n16cell.3 29.01151 56.03620  6.433057  2.85332708 -4.2885083 -0.1488504\n16cell.4 26.38026 58.09265  4.671850  7.99519397  9.8077416  2.0570042\n16cell.5 24.90566 60.77897  5.632497 -3.80156587  9.8835527 11.9028394\n                PC7        PC8       PC9      PC10      PC11       PC12\n16cell    2.4645020  1.6350660  7.202260  9.862212 10.660702  0.6401721\n16cell.1  2.1726663 -3.3481641  8.967394  6.664942 14.493227 11.7471565\n16cell.2 -7.9007309  0.3368756  6.032645  5.295515 15.384993  4.2930696\n16cell.3 -4.3727592 -1.1582470  1.520145 -8.789699 19.386866 -0.4999047\n16cell.4 -0.6031572 -3.6743278  5.793753 10.823787  7.613724  4.7288640\n16cell.5 -4.3269009  3.8968881 11.805221  9.798854 11.016137 19.1535086\n              PC13      PC14       PC15       PC16      PC17      PC18\n16cell   -5.716841  6.544614  -6.652210   3.458346  4.499013 11.360753\n16cell.1 13.284708 -4.206404  -8.721043   7.926277  0.703508  5.418131\n16cell.2  9.633173  1.672498  -9.609001   9.302794 10.219743  5.763834\n16cell.3 14.177687 -8.509097  -6.978210 -10.771078  6.188808 -6.504081\n16cell.4  3.106382 -4.078414 -10.739979  12.032452  6.239499 -2.331292\n16cell.5  9.544362 -2.255400  -8.614958   2.832196  1.798584 -2.321082\n               PC19      PC20      PC21       PC22       PC23       PC24\n16cell   -2.2617345  2.456274 11.227414  1.7122827  -8.418641  -4.254968\n16cell.1 11.8613891 -4.069530  9.320831  0.5802347 -11.878096   6.412425\n16cell.2  3.3460356 -4.165813  2.031473 -2.1106373  -1.762218   1.135134\n16cell.3  0.6042649 -6.008176  9.982856  9.4888653   2.822138 -12.871921\n16cell.4 -3.9402029  0.298227 10.773722 -0.6374236   4.730329  -4.670391\n16cell.5  2.0280791 -5.050525 -3.252243 -7.1527175  -9.923140   1.791511\n              PC25      PC26       PC27      PC28         PC29       PC30\n16cell    4.049629  4.133374 -0.6235391  3.381254 -13.94917609  -8.217824\n16cell.1  8.052083  8.334263 -0.5815629 -4.592214  -1.32417854   5.266909\n16cell.2  2.326133  3.775858 -2.3388745  6.947394  -0.08121559  -2.942813\n16cell.3  5.860750  1.869659  7.0402429 -5.092207   2.53575943 -18.529304\n16cell.4  4.291113 13.005331  3.2802102 -4.606226   3.52531994  -3.599833\n16cell.5 -4.708265  5.717693  1.1023767 -9.761377   4.57312078 -12.138646\n               PC31      PC32       PC33      PC34       PC35       PC36\n16cell    -6.897320  5.675943 -8.6076039  3.713348  0.9099737  4.7467546\n16cell.1  -4.538307 -9.166969  9.4525575  8.848231  2.0782319  7.4318993\n16cell.2   3.082470  2.207176 -0.5365986  3.895378 -7.4493361  0.7465149\n16cell.3   1.680117  3.839556 13.3156066  6.257479  4.1112596  0.2780589\n16cell.4 -13.314741  1.453554 -0.1334034 -2.941487  0.8162660 -2.9940693\n16cell.5  -4.608498 12.180530 -5.8667454 -6.645273 -1.0224859  0.8960299\n              PC37       PC38       PC39       PC40      PC41       PC42\n16cell   -9.063470 -5.2765051  1.1758453  -9.474215  3.559391 -4.7781174\n16cell.1 -6.217009  1.0216459  0.5798035 -21.705585 -3.570104  2.3279923\n16cell.2 -6.227582  3.0863112  8.6153521   1.401230  2.266017  0.8150665\n16cell.3 -8.411600  3.7169411 -0.7050601  -2.959623 -3.123082  1.0916370\n16cell.4  2.871774 -4.2664023 -7.4894594   8.207422  4.223035 -1.4763577\n16cell.5 10.169730  0.3923632 -9.3346900  -8.114487 11.186021 -4.5635674\n                PC43      PC44      PC45      PC46        PC47      PC48\n16cell    7.92280920  8.558202  7.058962  3.058209  -0.5723866  4.674964\n16cell.1 -5.60067538 -8.717056 -6.480960  8.554813 -13.1868736  3.397933\n16cell.2 -5.25328812  5.803788  2.726822  1.241769   7.4824415 -4.088457\n16cell.3  0.05135523  2.181424  2.404780  8.691231   8.9700016 -3.713542\n16cell.4 -1.55019720 -4.946841  0.520753 -3.068227  10.7801148  5.167662\n16cell.5  9.98211745  8.759947 -3.727758 -9.064882  -1.7524456 -3.306614\n              PC49       PC50\n16cell    2.936245 -3.6018020\n16cell.1  3.420242  3.4912940\n16cell.2 -4.446019  0.2314861\n16cell.3  5.179606 -9.7145187\n16cell.4  1.077786 -3.0533212\n16cell.5 -5.019036 -0.9294612\n\n\nAdd PCA data to the deng_SCE object.\n\ndeng_SCE$PC1 &lt;- pca[, 1]\ndeng_SCE$PC2 &lt;- pca[, 2]\n\nPlot PC biplot with cells colored by cell_type2. colData(deng_SCE) accesses the cell metadata DataFrame object for deng_SCE. Look at Figure 1A of the paper as a comparison to your PC biplot.\n\nggplot(as.data.frame(colData(deng_SCE)), aes(x = PC1, y = PC2, color = cell_type2)) +\n  geom_point(size=2, shape=20) +\n  theme_classic() +\n  xlab(\"PC1\") + ylab(\"PC2\") + ggtitle(\"PC biplot\")\n\n\n\n\nPCA is a simple approach and can be good to compare to more complex algorithms designed to capture differentiation processes. As a simple measure of pseudotime we can use the coordinates of PC1. Plot PC1 vs cell_type2.\n\ndeng_SCE$pseudotime_PC1 &lt;- rank(deng_SCE$PC1)  # rank cells by their PC1 score\n\nCreate a jitter plot\n\nggplot(as.data.frame(colData(deng_SCE)), aes(x = pseudotime_PC1, y = cell_type2,\n                                             colour = cell_type2)) +\n  ggbeeswarm::geom_quasirandom(groupOnX = FALSE) +\n  theme_classic() +\n  xlab(\"PC1\") + ylab(\"Timepoint\") +\n  ggtitle(\"Cells ordered by first principal component\")\n\n\n\n\nRead the Slingshot documentation (?slingshot::slingshot) and then run Slingshot below.\n\nsce &lt;- slingshot::slingshot(deng_SCE, reducedDim = 'PCA')\n\nNo cluster labels provided. Continuing with one cluster.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nGiven your understanding of the algorithm and the documentation, what is one major set of parameters we omitted here when running Slingshot?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nWe didn’t set the parameter clusterLabels\n\n\n\nHere is a custom function to plot the PCA based on a slingshot object. Run it in the console to add it to your global environment:\n\nPCAplot_slingshot &lt;- function(sce, draw_lines = TRUE, variable = NULL, legend = FALSE, ...){\n  # set palette for factorial variables\n  palf &lt;- colorRampPalette(RColorBrewer::brewer.pal(8, \"Set2\"))\n  # set palette for numeric variables\n  paln &lt;- colorRampPalette(RColorBrewer::brewer.pal(9, \"Blues\"))\n  # extract pca from SingleCellExperiment object\n  pca &lt;- SingleCellExperiment::reducedDims(sce)$PCA\n\n  if(is.null(variable)){\n    col &lt;- \"black\"\n  }\n  if(is.character(variable)){\n    variable &lt;- as.factor(variable)\n  }\n  if(is.factor(variable)){\n    colpal &lt;- palf(length(levels(variable)))\n    colors &lt;- colpal[variable]\n  }\n  if(is.numeric(variable)){\n    colpal &lt;- paln(50)\n    colors &lt;- colpal[cut(variable,breaks=50)]\n  }\n\n  # draw the plot\n  plot(pca, bg = colors, pch = 21)\n  # draw lines\n  if(draw_lines){\n    lines(slingshot::SlingshotDataSet(sce), lwd = 2, ... )\n  }\n  # add legend\n  if(legend & is.factor(variable)){\n    legend(\"bottomright\", pt.bg = colpal,legend = levels(variable),pch=21)\n\n  }\n}\n\nHave a look at the PCA with the slingshot pseudotime line:\n\nPCAplot_slingshot(sce, variable = sce$slingPseudotime_1, draw_lines = TRUE)\n\nas(&lt;dsCMatrix&gt;, \"dgCMatrix\") is deprecated since Matrix 1.5-0; do as(., \"generalMatrix\") instead\n\n\n\n\n\nAlso have a look at pseudotime versus cell type:\n\nggplot(as.data.frame(colData(deng_SCE)), aes(x = sce$slingPseudotime_1,\n                                             y = cell_type2,\n                                             colour = cell_type2)) +\n  ggbeeswarm::geom_quasirandom(groupOnX = FALSE) +\n  theme_classic() +\n  xlab(\"Slingshot pseudotime\") + ylab(\"Timepoint\") +\n  ggtitle(\"Cells ordered by Slingshot pseudotime\")\n\n\n\n\nThis already looks pretty good. Let’s see whether we can improve it. First we generate clusters by using Seurat:\n\ngcdata &lt;- Seurat::CreateSeuratObject(counts = SingleCellExperiment::counts(deng_SCE),\n                                     project = \"slingshot\")\n\ngcdata &lt;- Seurat::NormalizeData(object = gcdata,\n                                normalization.method = \"LogNormalize\",\n                                scale.factor = 10000)\n\ngcdata &lt;- Seurat::FindVariableFeatures(object = gcdata,\n                                       mean.function = ExpMean,\n                                       dispersion.function = LogVMR)\n\ngcdata &lt;- Seurat::ScaleData(object = gcdata,\n                            do.center = T,\n                            do.scale = F)\n\ngcdata &lt;- Seurat::RunPCA(object = gcdata,\n                         pc.genes = gcdata@var.genes)\n\ngcdata &lt;- Seurat::FindNeighbors(gcdata,\n                                reduction = \"pca\",\n                                dims = 1:5)\n\n# clustering with resolution of 0.6\ngcdata &lt;- Seurat::FindClusters(object = gcdata,\n                               resolution = 0.6)\n\nNow we can add these clusters to the slingshot function:\n\ndeng_SCE$Seurat_clusters &lt;- as.character(Idents(gcdata))  # go from factor to character\n\nsce &lt;- slingshot::slingshot(deng_SCE,\n                                 clusterLabels = 'Seurat_clusters',\n                                 reducedDim = 'PCA',\n                                 start.clus = \"2\")\n\nCheck how the slingshot object has evolved\n\nSlingshotDataSet(sce)\n\nas(&lt;dsCMatrix&gt;, \"dgCMatrix\") is deprecated since Matrix 1.5-0; do as(., \"generalMatrix\") instead\n\n\nclass: SlingshotDataSet \n\n Samples Dimensions\n     268         50\n\nlineages: 2 \nLineage1: 2  4  0  5  3  \nLineage2: 2  4  1  \n\ncurves: 2 \nCurve1: Length: 425.94  Samples: 234.63\nCurve2: Length: 341 Samples: 132.38\n\n\nPlot PC1 versus PC2 colored by slingshot pseudotime:\n\nPCAplot_slingshot(sce, variable = sce$slingPseudotime_2)\n\n\n\n\nPlot Slingshot pseudotime vs cell stage.\n\nggplot(data.frame(cell_type2 = deng_SCE$cell_type2,\n                  slingPseudotime_1 = sce$slingPseudotime_1),\n        aes(x = slingPseudotime_1, y = cell_type2,\n        colour = cell_type2)) +\n  ggbeeswarm::geom_quasirandom(groupOnX = FALSE) +\n  theme_classic() +\n  xlab(\"Slingshot pseudotime\") + ylab(\"Timepoint\") +\n  ggtitle(\"Cells ordered by Slingshot pseudotime\")\n\nWarning: Removed 29 rows containing missing values (position_quasirandom).\n\n\n\n\nggplot(data.frame(cell_type2 = deng_SCE$cell_type2,\n                  slingPseudotime_2 = sce$slingPseudotime_2),\n        aes(x = slingPseudotime_2, y = cell_type2,\n        colour = cell_type2)) +\n  ggbeeswarm::geom_quasirandom(groupOnX = FALSE) +\n  theme_classic() +\n  xlab(\"Slingshot pseudotime\") + ylab(\"Timepoint\") +\n  ggtitle(\"Cells ordered by Slingshot pseudotime\")\n\nWarning: Removed 134 rows containing missing values (position_quasirandom).\n\n\n\n\n\nParticularly the later stages, separation seems to improve. Since we have included the Seurat clustering, we can plot the PCA, with colors according to these clusters:\n\nPCAplot_slingshot(sce,\n                  variable = deng_SCE$Seurat_clusters,\n                  type = 'lineages',\n                  col = 'black',\n                  legend = TRUE)\n\n\n\nPCAplot_slingshot(sce,\n                  variable = deng_SCE$cell_type2,\n                  type = 'lineages',\n                  col = 'black',\n                  legend = TRUE)\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nInstead of providing an initial cluster, think of an end cluster that would fit this trajectory analysis and perform the slingshot analysis. Does slingshot find the initial cluster corresponding to the biological correct situation?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nsce &lt;- slingshot::slingshot(deng_SCE,\n                             clusterLabels = 'Seurat_clusters',\n                             reducedDim = 'PCA',\n                             end.clus = c(\"0\", \"3\", \"5\")) ## check which would be the best according to bio\n\n\n\n\nClear your environment:\n\nrm(list = ls())\ngc()\n.rs.restartR()\n\nTrajectory analysis with monocle3\n\n\n\n\n\n\n\nNot on the cloud server\n\n\n\nCurrently it’s not possible to use the interactive part of monocole3 on the cloud server. Therefore, these exercises can only be performed locally.\n\n\nThis part showcases how you can use monocle3 to perform a trajectory analysis. First load the seu_int dataset:\n\nseu_int &lt;- readRDS(\"seu_day2-4.rds\")\n\nLoad the required package into your environment:\n\nlibrary(monocle3)\n\nGenerate a monocle3 object (with class cell_data_set) from our Seurat object:\n\n# get matrix and filter for minimum number of cells and features (the latter is a fix for backward compatibility)\nmat_tmp &lt;- seu_int@assays$RNA@counts\nseu_tmp &lt;- Seurat::CreateSeuratObject(mat_tmp, min.cells = 3,\n                                      min.features = 100)\n\nfeature_names &lt;- as.data.frame(rownames(seu_tmp))\nrownames(feature_names) &lt;- rownames(seu_tmp)\ncolnames(feature_names) &lt;- \"gene_short_name\"\n\nseu_int_monocl &lt;- monocle3::new_cell_data_set(seu_tmp@assays$RNA@counts,\n                                              cell_metadata = seu_int@meta.data,\n                                              gene_metadata = feature_names)\n\nWe pre-process the newly created object. What does it involve? Check:\n\n?preprocess_cds\n\nPreprocess the dataset:\n\nseu_int_monocl &lt;- monocle3::preprocess_cds(seu_int_monocl)\n\nAnd check out the elbow plot:\n\nmonocle3::plot_pc_variance_explained(seu_int_monocl)\n\nPerform UMAP using the implementation in the monocle3 package and its default parameters:\n\nseu_int_monocl &lt;- monocle3::reduce_dimension(seu_int_monocl, reduction_method = \"UMAP\")\n\nPlot the monocle3 UMAP coloring cells according to the cluster ID ran with Seurat:\n\nmonocle3::plot_cells(seu_int_monocl, \n                     color_cells_by = \"integrated_snn_res.0.3\", \n                     cell_size = 1, \n                     show_trajectory_graph = FALSE)\n\nmonocle3::plot_cells(seu_int_monocl, genes = \"CD79A\", \n                     show_trajectory_graph = FALSE, \n                     cell_size = 1)\n\nCluster cells using monocle3’s clustering function:\n\nseu_int_monocl &lt;- monocle3::cluster_cells(seu_int_monocl, resolution=0.00025)\nmonocle3::plot_cells(seu_int_monocl, label_cell_groups = F)\n\nlearn graph (i.e. identify trajectory) using monocle3 UMAP and clustering:\n\nseu_int_monocl &lt;- monocle3::learn_graph(seu_int_monocl)\nmonocle3::plot_cells(seu_int_monocl)\n\n\n\n\n\n\n\nExercise\n\n\n\nFind the CD34+ B-cell cluster in the monocle UMAP. This cluster has a high expressession of CD79A and expresses CD34.\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\n\nmonocle3::plot_cells(seu_int_monocl, genes = c(\"CD79A\", \"CD34\"),\n                 show_trajectory_graph = FALSE, \n                 cell_size = 0.7, group_label_size = 4)\n\nReturns:\nThe left part of cluster 7 has both a high expression of CD79A and CD34.\n\n\n\nSelect the “initial” cells in the B-cell cluster to calculate pseudotime. The initial cells in this case are the CD34+ B-cells we have just identified. A pop up window will open and you need to click on the “initial” cells (one node per trajectory), then click “Done”.\n\nseu_int_monocl&lt;-monocle3::order_cells(seu_int_monocl)#\n\n\nmonocle3::plot_cells(seu_int_monocl,\n           color_cells_by = \"pseudotime\",\n           label_cell_groups=F,\n           label_leaves=F,\n           label_branch_points=FALSE,\n           graph_label_size=1.5, cell_size = 1)\n\nIn order to find genes which expression is affected by pseudtime, we first have to isolate the B-cell cluster. Therefore, extract all cells in the B-cell cluster with the interactive choose_cells function:\n\nseuB &lt;- choose_cells(seu_int_monocl)\n\nCheck whether you have selected the right cells:\n\nplot_cells(seuB, show_trajectory_graph = FALSE, cell_size = 1)\n\nNow we can use the cells in this trajectory to test which genes are affected by the trajectory:\n\npr_test &lt;- graph_test(seuB, \n                      cores=4, \n                      neighbor_graph = \"principal_graph\")\n# order by test statistic\npr_test &lt;- pr_test[order(pr_test$morans_test_statistic, \n                         decreasing = TRUE),]\nView(pr_test)\n\nThere are some interesting genes in there, for example related to cell cycling (MKI67, CKS2), related to B-cell development (CD34, MS4A1) and immunoglobulins (IGLL1 and IGLL5). We can plot those in the UMAP:\n\ngoi &lt;- c(\"CD34\", \"MS4A1\", \"IGLL1\", \"IGLL5\", \n         \"MKI67\", \"CKS2\")\nplot_cells(seuB, label_cell_groups=FALSE, genes = goi,\n           show_trajectory_graph=FALSE, cell_size = 1)\n\nBut also against pseudotime:\n\nseuB@colData$monocle_cluster &lt;- clusters(seuB)\n\nplot_genes_in_pseudotime(subset(seuB, \n                                rowData(seuB)$gene_short_name %in% goi),\n                         min_expr=0.5, color_cells_by = \"monocle_cluster\")"
  },
  {
    "objectID": "day3/day3-4_advanced_analyses.html",
    "href": "day3/day3-4_advanced_analyses.html",
    "title": "Advanced analyses",
    "section": "",
    "text": "Download the presentation"
  },
  {
    "objectID": "day3/day3-4_advanced_analyses.html#material",
    "href": "day3/day3-4_advanced_analyses.html#material",
    "title": "Advanced analyses",
    "section": "",
    "text": "Download the presentation"
  },
  {
    "objectID": "day3/day3-1_differential_gene_expression.html",
    "href": "day3/day3-1_differential_gene_expression.html",
    "title": "Differential gene expression",
    "section": "",
    "text": "Download the presentation{: .md-button }\n\nMore information on pseudobulk analysis\n\n\nMuscat for pseudobulk DGE.\n\nPaper on the robustness of different differential expression analysis methods"
  },
  {
    "objectID": "day3/day3-1_differential_gene_expression.html#material",
    "href": "day3/day3-1_differential_gene_expression.html#material",
    "title": "Differential gene expression",
    "section": "",
    "text": "Download the presentation{: .md-button }\n\nMore information on pseudobulk analysis\n\n\nMuscat for pseudobulk DGE.\n\nPaper on the robustness of different differential expression analysis methods"
  },
  {
    "objectID": "day3/day3-1_differential_gene_expression.html#exercises",
    "href": "day3/day3-1_differential_gene_expression.html#exercises",
    "title": "Differential gene expression",
    "section": "Exercises",
    "text": "Exercises\nFind all markers for each cluster\nLoad the seu_int dataset you have created yesterday:\n\nseu_int &lt;- readRDS(\"seu_day2-4.rds\")\n\nAnd load the following packages (install them if they are missing):\n\nlibrary(Seurat)\n\nAttaching SeuratObject\n\n\nAttaching sp\n\nlibrary(edgeR) # BiocManager::install(\"edgeR\")\n\nWarning: package 'edgeR' was built under R version 4.2.1\n\n\nLoading required package: limma\n\n\nWarning: package 'limma' was built under R version 4.2.1\n\nlibrary(limma)\n\nThe function FindAllMarkers performs a Wilcoxon plot to determine the genes differentially expressed between each cluster and the rest of the cells. Other types of tests than the Wilcoxon test are available. Check it out by running ?Seurat::FindAllMarkers.\nNow run analysis:\n\nde_genes &lt;- Seurat::FindAllMarkers(seu_int,  min.pct = 0.25,\n                                   only.pos = TRUE)\n\n\n\n\n\n\n\nNote\n\n\n\n##Time for coffee This takes a while. Have a break.\n\n\nSubset the table to only keep the significant genes, and you can save it as a csv file if you wish to explore it further. Then extract the top 3 markers per cluster:\n\nde_genes &lt;- subset(de_genes, de_genes$p_val_adj&lt;0.05)\nwrite.csv(de_genes, \"de_genes_FindAllMarkers.csv\", row.names = F, quote = F)\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ntop_specific_markers &lt;- de_genes %&gt;%\n  group_by(cluster) %&gt;%\n  top_n(3, avg_log2FC)\n\nAnd generate e.g. a dotplot:\n\ndittoSeq::dittoDotPlot(seu_int, vars = unique(top_specific_markers$gene), \n                       group.by = \"integrated_snn_res.0.3\")\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nWhat are significant marker genes in cluster 0 and 8? Are the T cell genes in there?\n\n\n\nYou can re-load the vector with immune genes with:\n\ntcell_genes &lt;- c(\"IL7R\", \"LTB\", \"TRAC\", \"CD3D\")\n\n\n::: {.callout-tip collapse = “true”} ## Answer\n\nde_genes[de_genes$gene %in% tcell_genes,] |&gt; knitr::kable()\n\n\n\n\np_val\navg_log2FC\npct.1\npct.2\np_val_adj\ncluster\ngene\n\n\n\nCD3D\n0\n2.0608957\n0.769\n0.227\n0\n0\nCD3D\n\n\nTRAC\n0\n1.6978332\n0.619\n0.204\n0\n0\nTRAC\n\n\nLTB\n0\n1.5374343\n0.759\n0.394\n0\n0\nLTB\n\n\nIL7R\n0\n1.5292274\n0.437\n0.114\n0\n0\nIL7R\n\n\nLTB1\n0\n1.1510176\n0.673\n0.465\n0\n7\nLTB\n\n\nTRAC1\n0\n1.8345938\n0.759\n0.274\n0\n8\nTRAC\n\n\nCD3D1\n0\n1.6980383\n0.798\n0.326\n0\n8\nCD3D\n\n\nLTB2\n0\n1.6381762\n0.768\n0.462\n0\n8\nLTB\n\n\nIL7R1\n0\n1.1453364\n0.461\n0.173\n0\n8\nIL7R\n\n\nLTB3\n0\n0.8247275\n0.753\n0.467\n0\n11\nLTB\n\n\n\n\n\nSo, yes, the T-cell genes are highly significant markers for cluster 0 and 8. :::\nDifferential expression between groups of cells\nThe FindMarkers function allows to test for differential gene expression analysis specifically between 2 groups of cells, i.e. perform pairwise comparisons, eg between cells of cluster 0 vs cluster 2, or between cells annotated as T-cells and B-cells.\nFirst we can set the default cell identity to the cell types defined by SingleR:\n\nseu_int &lt;- Seurat::SetIdent(seu_int, value = \"SingleR_annot\")\n\nRun the differential gene expression analysis and subset the table to keep the significant genes:\n\ndeg_cd8_cd4 &lt;- Seurat::FindMarkers(seu_int,\n                                   ident.1 = \"CD8+ T cells\",\n                                   ident.2 = \"CD4+ T cells\",\n                                   group.by = seu_int$SingleR_annot,\n                                   test.use = \"wilcox\")\ndeg_cd8_cd4 &lt;- subset(deg_cd8_cd4, deg_cd8_cd4$p_val_adj&lt;0.05)\n\n\n\n\n\n\n\nExercise\n\n\n\nAre CD8A, CD8B and CD4 in there? What does the sign (i.e. positive or negative) mean in the log fold change values? Are they according to the CD8+ and CD4+ annotations? Check your answer by generating a violin plot of a top differentially expressed gene.\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nYou can check out the results with:\n\nView(deg_cd8_cd4)\n\n\n\n\n\n\np_val\navg_log2FC\npct.1\npct.2\np_val_adj\n\n\n\nCD8A\n0.0e+00\n1.2956354\n0.344\n0.008\n0.0000000\n\n\nCTSW\n0.0e+00\n0.9686281\n0.283\n0.029\n0.0000000\n\n\nCCL5\n0.0e+00\n2.5884630\n0.292\n0.061\n0.0000000\n\n\nCD8B\n0.0e+00\n0.8536693\n0.479\n0.177\n0.0000000\n\n\nNKG7\n0.0e+00\n2.0692198\n0.231\n0.037\n0.0000000\n\n\nCST7\n0.0e+00\n0.9061154\n0.147\n0.012\n0.0000000\n\n\nGZMA\n0.0e+00\n1.2771487\n0.173\n0.025\n0.0000000\n\n\nTRGC2\n0.0e+00\n0.9457918\n0.148\n0.017\n0.0000000\n\n\nID2\n0.0e+00\n0.6943385\n0.579\n0.347\n0.0000000\n\n\nMT-CO1\n0.0e+00\n0.3476088\n0.988\n0.980\n0.0000000\n\n\nKLRD1\n0.0e+00\n0.7547626\n0.110\n0.008\n0.0000000\n\n\nHCST\n0.0e+00\n0.6611536\n0.694\n0.489\n0.0000000\n\n\nGZMK\n0.0e+00\n0.8785594\n0.134\n0.022\n0.0000000\n\n\nTRGC1\n0.0e+00\n0.7533633\n0.113\n0.013\n0.0000000\n\n\nMT-ND4\n0.0e+00\n0.3442778\n0.965\n0.931\n0.0000000\n\n\nRP11-291B21.2\n0.0e+00\n0.5729470\n0.226\n0.076\n0.0000000\n\n\nMT-CO2\n0.0e+00\n0.2568810\n0.994\n0.994\n0.0000000\n\n\nFHIT\n0.0e+00\n-0.6810903\n0.113\n0.268\n0.0000000\n\n\nTRDC\n0.0e+00\n0.9507650\n0.107\n0.018\n0.0000000\n\n\nLYAR\n0.0e+00\n0.6692540\n0.203\n0.074\n0.0000000\n\n\nACTB\n0.0e+00\n0.3240542\n0.965\n0.926\n0.0000000\n\n\nPRF1\n0.0e+00\n0.4148957\n0.102\n0.017\n0.0000000\n\n\nMT-CO3\n0.0e+00\n0.2992841\n0.971\n0.950\n0.0000000\n\n\nCD4\n0.0e+00\n-0.4000835\n0.012\n0.103\n0.0000000\n\n\nCCL4\n0.0e+00\n1.1567053\n0.120\n0.030\n0.0000000\n\n\nMT-ND2\n0.0e+00\n0.3127492\n0.961\n0.916\n0.0000000\n\n\nAC092580.4\n0.0e+00\n0.5206621\n0.174\n0.062\n0.0000000\n\n\nHLA-B\n0.0e+00\n0.3221429\n0.974\n0.932\n0.0000001\n\n\nRUNX3\n0.0e+00\n0.3428665\n0.184\n0.070\n0.0000001\n\n\nTPST2\n0.0e+00\n0.4343363\n0.141\n0.044\n0.0000001\n\n\nNR4A2\n0.0e+00\n0.5202848\n0.350\n0.199\n0.0000003\n\n\nMT-ND3\n0.0e+00\n0.2809915\n0.958\n0.928\n0.0000005\n\n\nGNLY\n0.0e+00\n1.6651734\n0.135\n0.045\n0.0000006\n\n\nMT-ATP6\n0.0e+00\n0.3132901\n0.938\n0.899\n0.0000015\n\n\nFAM173A\n0.0e+00\n0.4097859\n0.197\n0.086\n0.0000022\n\n\nCBLB\n0.0e+00\n0.2888085\n0.131\n0.044\n0.0000091\n\n\nBZW1\n0.0e+00\n0.4436429\n0.360\n0.221\n0.0000109\n\n\nJUN\n0.0e+00\n0.5248833\n0.691\n0.582\n0.0000262\n\n\nIL32\n0.0e+00\n0.4441875\n0.742\n0.624\n0.0000293\n\n\nLITAF\n0.0e+00\n0.4384073\n0.417\n0.272\n0.0000299\n\n\nIFRD1\n0.0e+00\n0.4287728\n0.311\n0.179\n0.0000357\n\n\nACTG1\n0.0e+00\n0.3550782\n0.750\n0.619\n0.0000501\n\n\nLCP1\n0.0e+00\n0.3834983\n0.318\n0.196\n0.0002808\n\n\nHLA-DPB1\n0.0e+00\n0.3699177\n0.215\n0.111\n0.0003358\n\n\nKLRG1\n0.0e+00\n0.4372144\n0.106\n0.037\n0.0003461\n\n\nCYBA\n0.0e+00\n0.3626436\n0.692\n0.575\n0.0005623\n\n\nRPL36A\n0.0e+00\n-0.2636701\n0.988\n0.990\n0.0006252\n\n\nDUSP1\n0.0e+00\n0.4773763\n0.700\n0.576\n0.0007094\n\n\nDUSP2\n0.0e+00\n0.6941207\n0.325\n0.210\n0.0008438\n\n\nS100A4\n1.0e-07\n0.4158906\n0.591\n0.467\n0.0009771\n\n\nSRGN\n1.0e-07\n0.5274908\n0.476\n0.355\n0.0010323\n\n\nMT-ND5\n1.0e-07\n0.3723932\n0.729\n0.644\n0.0012021\n\n\nGZMM\n1.0e-07\n0.3179818\n0.360\n0.229\n0.0013519\n\n\nMT-ND1\n1.0e-07\n0.2968126\n0.849\n0.787\n0.0015110\n\n\nZFP36\n1.0e-07\n0.4700353\n0.399\n0.274\n0.0016737\n\n\nTRAT1\n1.0e-07\n-0.5086304\n0.138\n0.238\n0.0016743\n\n\nMAL\n1.0e-07\n-0.4840650\n0.152\n0.252\n0.0021382\n\n\nA1BG\n1.0e-07\n0.3035121\n0.149\n0.068\n0.0026934\n\n\nARPC5L\n2.0e-07\n0.2581570\n0.176\n0.086\n0.0029573\n\n\nHLA-A\n2.0e-07\n0.2922902\n0.898\n0.841\n0.0032584\n\n\nICOS\n2.0e-07\n-0.3882220\n0.036\n0.105\n0.0033535\n\n\nS100B\n2.0e-07\n0.5873272\n0.104\n0.040\n0.0046322\n\n\nLINC00152\n3.0e-07\n0.3001131\n0.104\n0.040\n0.0055603\n\n\nSTK17A\n3.0e-07\n0.3529199\n0.430\n0.306\n0.0057236\n\n\nC12orf75\n3.0e-07\n0.3524864\n0.202\n0.111\n0.0064928\n\n\nTSPAN32\n4.0e-07\n0.3176836\n0.125\n0.054\n0.0068297\n\n\nTSPYL2\n4.0e-07\n0.3144523\n0.274\n0.166\n0.0071097\n\n\nARPC1B\n4.0e-07\n0.3041903\n0.530\n0.404\n0.0078444\n\n\nSH3BGRL3\n5.0e-07\n0.2899331\n0.720\n0.616\n0.0089486\n\n\nCXCR4\n5.0e-07\n0.3576632\n0.739\n0.634\n0.0089842\n\n\nRHOA\n8.0e-07\n0.3034162\n0.427\n0.297\n0.0140834\n\n\nCMC1\n8.0e-07\n0.4137942\n0.103\n0.041\n0.0148046\n\n\nSRSF7\n1.0e-06\n0.3534034\n0.553\n0.434\n0.0178885\n\n\nPSME2\n1.2e-06\n0.3612496\n0.437\n0.318\n0.0227285\n\n\nRAB27A\n1.5e-06\n0.2514754\n0.109\n0.045\n0.0281147\n\n\nMYO1F\n1.5e-06\n0.3325859\n0.149\n0.074\n0.0287064\n\n\nDNAJA1\n1.8e-06\n0.3733802\n0.309\n0.206\n0.0338759\n\n\nADGRE5\n1.9e-06\n0.2649811\n0.203\n0.114\n0.0346912\n\n\nCORO1B\n2.6e-06\n-0.4747401\n0.125\n0.206\n0.0477291\n\n\n\n\n\nFor an explanation of the log fold change have a look at ?Seurat::FindMarkers. At Value it says:\n\navg_logFC: log fold-chage of the average expression between the two groups. Positive values indicate that the gene is more highly expressed in the first group\n\nTo view CD8A, CD8B and CD4:\n\ndeg_cd8_cd4[c(\"CD4\", \"CD8A\", \"CD8B\"),]\n\n            p_val avg_log2FC pct.1 pct.2    p_val_adj\nCD4  1.070126e-13 -0.4000835 0.012 0.103 1.998246e-09\nCD8A 1.409306e-77  1.2956354 0.344 0.008 2.631597e-73\nCD8B 7.113148e-36  0.8536693 0.479 0.177 1.328238e-31\n\n\nIndeed, because we compared ident.1 = “CD8+ T cells” to ident.2 = “CD4+ T cells”, a negative log2FC for the CD4 gene indicates a lower expression in CD8+ T-cells than in CD4+ T-cells, while a positive log2FC for the CD8A and CD8B genes indicates a higher expression in CD8+ T-cells.\nPlotting the genes in these two T-cell groups only:\n\nSeurat::VlnPlot(seu_int, \n            features = c(\"CD4\", \"CD8A\", \"CD8B\"),\n            idents = c(\"CD8+ T cells\", \"CD4+ T cells\"))\n\n\n\n\n\n\n\nDifferential expression using limma\n\nThe Wilcoxon test implemented in FindMarkers does not allow you to test for complex design (eg factorial experiments) or to include batch as a covariate. It doesn’t allow you to run paired-sample T tests for example.\nFor more complex designs, we can use edgeR or limma which are designed for microarray or bulk RNA seq data and provide a design matrix that includes covariates for example, or sample IDs for paired analyses.\nWe will load an object containing only pro B cells, both from healthy tissues (PBMMC), and malignant tissues (ETV6-RUNX1).\n\n\n\n\n\n\nWarning\n\n\n\nPlease NOTE that in the original design of this data set, the healthy and malignant tissues were not patient-matched, i.e. the real design was not the one of paired healthy and malignant tissues. However, for demonstration purposes, we will show you how to run a paired analysis, and do as if the PBMMC-1 and ETV6-RUNX1-1 samples both came from the same patient 1, the PBMMC-2 and ETV6-RUNX1-2 samples both came from the same patient 2, etc…\n\n\nWe can load the object and explore its UMAP and meta.data like this:\n\nproB &lt;- readRDS(\"course_data/proB.rds\")\n\nDimPlot(proB, group.by = \"orig.ident\")\n\n\n\ntable(proB@meta.data$type)\n\n\nETV6-RUNX1      PBMMC \n      2000       1021 \n\n# ETV6-RUNX1      PBMMC \n#      2000       1021\n\nhead(proB@meta.data)\n\n                           orig.ident nCount_RNA nFeature_RNA    SingleR_annot\nPBMMC-1_AAATGCCAGACTGGGT-1    PBMMC-1       4886         1727 Pro-B_cell_CD34+\nPBMMC-1_AAATGCCTCCACTGGG-1    PBMMC-1       8397         2291 Pro-B_cell_CD34+\nPBMMC-1_AACACGTTCTTGACGA-1    PBMMC-1       3444         1204 Pro-B_cell_CD34+\nPBMMC-1_AACCATGAGAAGGTGA-1    PBMMC-1       8981         2437 Pro-B_cell_CD34+\nPBMMC-1_AACCGCGCATGGTCAT-1    PBMMC-1       3719         1368 Pro-B_cell_CD34+\nPBMMC-1_AAGCCGCCAGACGTAG-1    PBMMC-1       4573         1464 Pro-B_cell_CD34+\n                            type\nPBMMC-1_AAATGCCAGACTGGGT-1 PBMMC\nPBMMC-1_AAATGCCTCCACTGGG-1 PBMMC\nPBMMC-1_AACACGTTCTTGACGA-1 PBMMC\nPBMMC-1_AACCATGAGAAGGTGA-1 PBMMC\nPBMMC-1_AACCGCGCATGGTCAT-1 PBMMC\nPBMMC-1_AAGCCGCCAGACGTAG-1 PBMMC\n\n\n\n\n\n\n\n\nNote\n\n\n\nIf you want to know how this pro-B cell subset is generated, have a look at the script here.\n\n\nSince we will start with differential gene expression, we set the default assay back to “RNA”. Also, we set the default identity to the cell type:\n\nSeurat::DefaultAssay(proB) &lt;- \"RNA\"\nSeurat::Idents(proB) &lt;- proB$orig.ident\n\nLet’s have a look at the UMAP (again), coloured by celltype:\n\nSeurat::DimPlot(proB)\n\n\n\n\nLet’s say we are specifically interested to test for differential gene expression between the tumor and normal samples.\n\n\n\n\n\n\nNote\n\n\n\nHere we could also test for e.g. healthy versus diseased within a celltype/cluster.\n\n\nNow we will run differential expression analysis between tumor and healthy cells using the patient ID as a covariate by using limma.\nPrepare the pseudobulk count matrix:\n\n#taking the proB data \nSeurat::DefaultAssay(proB) &lt;- \"RNA\"\nSeurat::Idents(proB) &lt;- proB$orig.ident\n\n## add the patient id also for paired DGE\nproB$patient.id&lt;-gsub(\"ETV6-RUNX1\", \"ETV6_RUNX1\", proB$orig.ident)\nproB$patient.id&lt;-sapply(strsplit(proB$patient.id, \"-\"), '[', 2)\n\n## Here we do perform pseudo-bulk:\n##first a mandatory column of sample needs to be added to the meta data that is the grouping factor, should be the samples\nproB$sample &lt;- factor(proB$orig.ident)\n\n##first an sce object is needed\nsce_proB &lt;- as.SingleCellExperiment(proB)\n\nlibrary(scuttle)\n\n##aggregateAcrossCells here it is only aggregated by sample, one could imagine\n##to aggregate by sample and by celltype for instance\nsummed &lt;- aggregateAcrossCells(sce_proB, \n                               id=colData(sce_proB)[,c(\"sample\")])\n\n\n##have a look at the counts\ncounts(summed)[1:3,]\n\n             ETV6-RUNX1-1 ETV6-RUNX1-2 ETV6-RUNX1-3 PBMMC-1 PBMMC-2 PBMMC-3\nRP11-34P13.7            0            0            0       2       0       0\nFO538757.3              0            0            0       0       0       0\nFO538757.2            138          275           74     129      40     112\n\n#have a look at the colData of our new object summed, can you see type and \n#patient.id are there\nhead(colData(summed))\n\nDataFrame with 6 rows and 10 columns\n               orig.ident nCount_RNA nFeature_RNA    SingleR_annot        type\n              &lt;character&gt;  &lt;numeric&gt;    &lt;integer&gt;      &lt;character&gt; &lt;character&gt;\nETV6-RUNX1-1 ETV6-RUNX1-1         NA           NA Pro-B_cell_CD34+  ETV6-RUNX1\nETV6-RUNX1-2 ETV6-RUNX1-2         NA           NA Pro-B_cell_CD34+  ETV6-RUNX1\nETV6-RUNX1-3 ETV6-RUNX1-3         NA           NA Pro-B_cell_CD34+  ETV6-RUNX1\nPBMMC-1           PBMMC-1         NA           NA Pro-B_cell_CD34+       PBMMC\nPBMMC-2           PBMMC-2         NA           NA Pro-B_cell_CD34+       PBMMC\nPBMMC-3           PBMMC-3         NA           NA Pro-B_cell_CD34+       PBMMC\n              patient.id       sample        ident          ids    ncells\n             &lt;character&gt;     &lt;factor&gt;     &lt;factor&gt;     &lt;factor&gt; &lt;integer&gt;\nETV6-RUNX1-1           1 ETV6-RUNX1-1 ETV6-RUNX1-1 ETV6-RUNX1-1       555\nETV6-RUNX1-2           2 ETV6-RUNX1-2 ETV6-RUNX1-2 ETV6-RUNX1-2      1110\nETV6-RUNX1-3           3 ETV6-RUNX1-3 ETV6-RUNX1-3 ETV6-RUNX1-3       335\nPBMMC-1                1 PBMMC-1      PBMMC-1      PBMMC-1            461\nPBMMC-2                2 PBMMC-2      PBMMC-2      PBMMC-2            153\nPBMMC-3                3 PBMMC-3      PBMMC-3      PBMMC-3            407\n\n\nGenerate a DGEList object to use as input for limma and filter the genes to remove lowly expressed genes. How many are left?\n\n#As in the standard limma analysis generate a DGE object\n\ny &lt;- DGEList(counts(summed), samples=colData(summed)$sample)\n\n##filter lowly expressed (recommanded for limma)\nkeep &lt;- filterByExpr(y, group=summed$type)\ny &lt;- y[keep,]\n\n##see how many genes were kept \nsummary(keep)\n\n   Mode   FALSE    TRUE \nlogical   11086   10017 \n\n\nGenerate a design matrix, including patient ID to model for a paired analysis. If you need help to generate a design matrix, check out the very nice edgeR User Guide, sections 3.3 and 3.4. Extract the sample ID from the meta.data, then create the design matrix:\n\n## Create the design matrix and include the technology as a covariate:\ndesign &lt;- model.matrix(~0 + summed$type + summed$patient.id)\n\n# Have a look\ndesign\n\n  summed$typeETV6-RUNX1 summed$typePBMMC summed$patient.id2 summed$patient.id3\n1                     1                0                  0                  0\n2                     1                0                  1                  0\n3                     1                0                  0                  1\n4                     0                1                  0                  0\n5                     0                1                  1                  0\n6                     0                1                  0                  1\nattr(,\"assign\")\n[1] 1 1 2 2\nattr(,\"contrasts\")\nattr(,\"contrasts\")$`summed$type`\n[1] \"contr.treatment\"\n\nattr(,\"contrasts\")$`summed$patient.id`\n[1] \"contr.treatment\"\n\n# change column/rownames names to more simple group names: \ncolnames(design) &lt;- make.names(c(\"ETV6-RUNX1\", \"PBMMC\",\"patient2\",\"patient3\"))\nrownames(design)&lt;-colData(summed)$sample\n\nSpecify which contrast to analyse:\n\ncontrast.mat &lt;- limma::makeContrasts(ETV6.RUNX1 - PBMMC,\n                                     levels = design)\n\nFirt, we perform TMM normalization using edgeR, and then limma can perform the transformation with voom, fit the model, compute the contrasts and compute test statistics with eBayes:\n\ndge &lt;- edgeR::calcNormFactors(y)  \n\n#Do limma\nvm &lt;- limma::voom(dge, design = design, plot = TRUE)\n\n\n\nfit &lt;- limma::lmFit(vm, design = design)\nfit.contrasts &lt;- limma::contrasts.fit(fit, contrast.mat)\nfit.contrasts &lt;- limma::eBayes(fit.contrasts)\n\nWe can use topTable to get the most significantly differentially expressed genes, and save the full DE results to an object. How many genes are significant? Are you suprised by this number?\n\n# Show the top differentially expressed genes:\nlimma::topTable(fit.contrasts, number = 10, sort.by = \"P\")\n\n               logFC  AveExpr         t      P.Value    adj.P.Val        B\nRPS4Y2      5.346800 6.347826  15.39674 3.361453e-08 0.0001152727 9.477129\nSDC2        9.070465 2.708711  15.33434 3.493119e-08 0.0001152727 7.681010\nIGLL1      -3.788160 9.287148 -15.19483 3.808426e-08 0.0001152727 9.465422\nCTGF        4.368363 6.029640  14.89301 4.603081e-08 0.0001152727 9.141505\nAP005530.2  8.770808 2.560369  14.27130 6.879238e-08 0.0001335825 7.294079\nGNG11       3.500250 6.457777  13.70183 1.008304e-07 0.0001335825 8.495288\nHLA-DQA1    2.982748 7.410939  13.39202 1.249067e-07 0.0001335825 8.287394\nPTP4A3      3.734865 5.449894  13.23439 1.395246e-07 0.0001335825 8.126807\nCD27        4.115561 5.843582  13.23011 1.399471e-07 0.0001335825 8.147433\nALOX5       4.142010 5.682900  13.16658 1.463814e-07 0.0001335825 8.098199\n\nlimma_de &lt;- limma::topTable(fit.contrasts, number = Inf, sort.by = \"P\")\nlength(which(limma_de$adj.P.Val&lt;0.05))\n\n[1] 2738\n\n\nAnd we can check whether this corresponds to the counts by generating a violin plot, or a gene downregulated in tumor, or a gene upregulated in tumor:\n\nSeurat::VlnPlot(proB, \"S100A9\", split.by = \"type\")\n\nThe default behaviour of split.by has changed.\nSeparate violin plots are now plotted side-by-side.\nTo restore the old behaviour of a single split violin,\nset split.plot = TRUE.\n      \nThis message will be shown once per session.\n\n\n\n\nSeurat::VlnPlot(proB, \"SOCS2\", split.by = \"type\")\n\n\n\n\nWe can run a similar analysis with Seurat, but this will not take into account the paired design. Run the code below.\n\ntum_vs_norm &lt;- Seurat::FindMarkers(proB, \n                                   ident.1 = \"ETV6-RUNX1\", \n                                   ident.2 = \"PBMMC\", \n                                   group.by = \"type\")\ntum_vs_norm &lt;- subset(tum_vs_norm, tum_vs_norm$p_val_adj&lt;0.05)\n\n\n\n\n\n\n\nExercise (extra)\n\n\n\nHow many genes are significant? How does the fold change of these genes compare to the fold change of the top genes found by limma?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\ndim(tum_vs_norm) \n\n[1] 1893    5\n\n\nWe find 1893 significant genes. If we merge the FindMarkers and the limma results, keep limma’s most significant genes and plot:\n\nmerge_limma_FindMarkers &lt;- merge(tum_vs_norm, limma_de, by=\"row.names\",\n                           all.x=T)\n\npar(mar=c(4,4,4,4))\nplot(merge_limma_FindMarkers$avg_log2FC,\n    merge_limma_FindMarkers$logFC,\n    xlab=\"log2FC Wilcoxon\", ylab=\"log2FC limma\",\n    pch=15, cex=0.5)\nabline(a=0, b=1, col=\"red\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nKeep the object\n\n\n\nKeep the tum_vs_norm and limma_de objects because we will use this output later for the enrichment analysis in the next section."
  },
  {
    "objectID": "day2/day2-3_clustering.html",
    "href": "day2/day2-3_clustering.html",
    "title": "Clustering",
    "section": "",
    "text": "Download the presentation\n\nEvaluation of clustering methods"
  },
  {
    "objectID": "day2/day2-3_clustering.html#material",
    "href": "day2/day2-3_clustering.html#material",
    "title": "Clustering",
    "section": "",
    "text": "Download the presentation\n\nEvaluation of clustering methods"
  },
  {
    "objectID": "day2/day2-3_clustering.html#exercises",
    "href": "day2/day2-3_clustering.html#exercises",
    "title": "Clustering",
    "section": "Exercises",
    "text": "Exercises\nLoad the seu_int dataset you have created earlier today:\n\nseu_int &lt;- readRDS(\"seu_day2-2.rds\")\n\nThe method implemented in Seurat first constructs a SNN graph based on the euclidean distance in PCA space, and refine the edge weights between any two cells based on the shared overlap in their local neighborhoods (Jaccard similarity). This step is performed using the FindNeighbors() function, and takes as input the previously defined dimensionality of the dataset.\n\n\n\n\n\n\nNote\n\n\n\nWe use the integrated object (seu_int) and the assay integrated. Unsure? Check DefaultAssay(seu_int), and set it by DefaultAssay(seu_int) &lt;- \"integrated\".\n\n\n\nseu_int &lt;- Seurat::FindNeighbors(seu_int, dims = 1:25)\n\nTo cluster the cells, Seurat next implements modularity optimization techniques such as the Louvain algorithm (default) or SLM [SLM, Blondel et al., Journal of Statistical Mechanics], to iteratively group cells together, with the goal of optimizing the standard modularity function. The FindClusters() function implements this procedure, and contains a resolution parameter that sets the ‘granularity’ of the downstream clustering, with increased values leading to a greater number of clusters.\n\nseu_int &lt;- Seurat::FindClusters(seu_int, resolution = seq(0.1, 0.8, by=0.1))\n\nCluster id of each cell is added to the metadata object, as a new column for each resolution tested:\n\nhead(seu_int@meta.data)\n\n                           orig.ident nCount_RNA nFeature_RNA percent.mito\nPBMMC-1_AAACCTGCAGACGCAA-1    PBMMC-1       2401          909     2.540608\nPBMMC-1_AAACCTGTCATCACCC-1    PBMMC-1       3532          760     5.181200\nPBMMC-1_AAAGATGCATAAAGGT-1    PBMMC-1       3972         1215     4.934542\nPBMMC-1_AAAGCAAAGCAGCGTA-1    PBMMC-1       3569          894     3.250210\nPBMMC-1_AAAGCAACAATAACGA-1    PBMMC-1       2982          730     3.688799\nPBMMC-1_AAAGCAACATCAGTCA-1    PBMMC-1      22284         3108     3.181655\n                           percent.ribo percent.globin nCount_SCT nFeature_SCT\nPBMMC-1_AAACCTGCAGACGCAA-1     28.65473      0.1665973       3396          909\nPBMMC-1_AAACCTGTCATCACCC-1     55.03964      0.1981880       3841          759\nPBMMC-1_AAAGATGCATAAAGGT-1     30.43807      0.3776435       3981         1215\nPBMMC-1_AAAGCAAAGCAGCGTA-1     55.02942      0.3642477       3842          894\nPBMMC-1_AAAGCAACAATAACGA-1     54.49363      0.1006036       3666          730\nPBMMC-1_AAAGCAACATCAGTCA-1     23.40693     36.9682283       5268         1006\n                           integrated_snn_res.0.1 integrated_snn_res.0.2\nPBMMC-1_AAACCTGCAGACGCAA-1                      5                      7\nPBMMC-1_AAACCTGTCATCACCC-1                      0                      0\nPBMMC-1_AAAGATGCATAAAGGT-1                      2                      2\nPBMMC-1_AAAGCAAAGCAGCGTA-1                      0                      0\nPBMMC-1_AAAGCAACAATAACGA-1                      0                      0\nPBMMC-1_AAAGCAACATCAGTCA-1                      4                      3\n                           integrated_snn_res.0.3 integrated_snn_res.0.4\nPBMMC-1_AAACCTGCAGACGCAA-1                      7                      7\nPBMMC-1_AAACCTGTCATCACCC-1                      0                      0\nPBMMC-1_AAAGATGCATAAAGGT-1                      2                      2\nPBMMC-1_AAAGCAAAGCAGCGTA-1                      0                      0\nPBMMC-1_AAAGCAACAATAACGA-1                      0                      0\nPBMMC-1_AAAGCAACATCAGTCA-1                      5                      5\n                           integrated_snn_res.0.5 integrated_snn_res.0.6\nPBMMC-1_AAACCTGCAGACGCAA-1                      7                      6\nPBMMC-1_AAACCTGTCATCACCC-1                      0                      0\nPBMMC-1_AAAGATGCATAAAGGT-1                      2                      2\nPBMMC-1_AAAGCAAAGCAGCGTA-1                      0                      0\nPBMMC-1_AAAGCAACAATAACGA-1                      0                      0\nPBMMC-1_AAAGCAACATCAGTCA-1                      5                      4\n                           integrated_snn_res.0.7 integrated_snn_res.0.8\nPBMMC-1_AAACCTGCAGACGCAA-1                      8                      9\nPBMMC-1_AAACCTGTCATCACCC-1                      0                      0\nPBMMC-1_AAAGATGCATAAAGGT-1                      2                      1\nPBMMC-1_AAAGCAAAGCAGCGTA-1                      0                      0\nPBMMC-1_AAAGCAACAATAACGA-1                      0                      0\nPBMMC-1_AAAGCAACATCAGTCA-1                      4                      3\n                           seurat_clusters\nPBMMC-1_AAACCTGCAGACGCAA-1               9\nPBMMC-1_AAACCTGTCATCACCC-1               0\nPBMMC-1_AAAGATGCATAAAGGT-1               1\nPBMMC-1_AAAGCAAAGCAGCGTA-1               0\nPBMMC-1_AAAGCAACAATAACGA-1               0\nPBMMC-1_AAAGCAACATCAGTCA-1               3\n\n\nTo view how clusters sub-divide at increasing resolution:\n\nlibrary(clustree)\n\nLoading required package: ggraph\n\n\nLoading required package: ggplot2\n\nclustree::clustree(seu_int@meta.data[,grep(\"integrated_snn_res\", colnames(seu_int@meta.data))],\n                   prefix = \"integrated_snn_res.\")\n\n\n\n\nYou can view the UMAP coloring each cell according to a cluster id like this:\n\nSeurat::DimPlot(seu_int, group.by = \"integrated_snn_res.0.1\")\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nVisualise clustering based on a few more resolutions. Taking the clustering and the UMAP plots into account what do you consider as a good resolution to perform the clustering?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nOf course, there is no ‘optimal’ resolution, but based on resolution of 0.3, the tree stays relatively stable for a few resolution steps, and it seems that clustering fits the UMAP well:\n\nSeurat::DimPlot(seu_int, group.by = \"integrated_snn_res.0.3\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nWhen do the number of neighbors need to be changed? How does changing the method of clustering in FindClusters affect the output? Which parameter should be changed?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nAs FindClusters is an unsupervised clustering method on the PCA data and UMAP is a good summary of the PCA dimension selected, clusters and UMAP plot should go along. If one has reasons to change the number of neighbors in the UMAP function, here the same parameter should be adapted.\nThe method can be changed with algorithm = 2,3 or 4"
  },
  {
    "objectID": "day2/day2-1_dimensionality_reduction.html",
    "href": "day2/day2-1_dimensionality_reduction.html",
    "title": "Dimensionality reduction",
    "section": "",
    "text": "Download the presentation\n\nMaking sense of PCA\n\nUnderstanding t-SNE\n\n\nt-SNE explained by Josh Starmer\nUnderstanding UMAP\n\n\nVideo by one of the UMAP authors\nMore info on UMAP parameters\nWe can generate heatmaps according to their principal component scores calculated in the rotation matrix:\nSeurat::DimHeatmap(seu, dims = 1:12, cells = 500, balanced = TRUE)\nThe elbowplot can help you in determining how many PCs to use for downstream analysis such as UMAP:\nSeurat::ElbowPlot(seu, ndims = 40)\nThe elbow plot ranks principle components based on the percentage of variance explained by each one. Where we observe an “elbow” or flattening curve, the majority of true signal is captured by this number of PCs, eg around 25 PCs for the seu dataset.\nIncluding too many PCs usually does not affect much the result, while including too few PCs can affect the results very much.\nUMAP: The goal of these algorithms is to learn the underlying manifold of the data in order to place similar cells together in low-dimensional space.\nseu &lt;- Seurat::RunUMAP(seu, dims = 1:25)\nTo view the UMAP plot:\nSeurat::DimPlot(seu, reduction = \"umap\")"
  },
  {
    "objectID": "day2/day2-1_dimensionality_reduction.html#material",
    "href": "day2/day2-1_dimensionality_reduction.html#material",
    "title": "Dimensionality reduction",
    "section": "",
    "text": "Download the presentation\n\nMaking sense of PCA\n\nUnderstanding t-SNE\n\n\nt-SNE explained by Josh Starmer\nUnderstanding UMAP\n\n\nVideo by one of the UMAP authors\nMore info on UMAP parameters"
  },
  {
    "objectID": "day2/day2-1_dimensionality_reduction.html#exercises",
    "href": "day2/day2-1_dimensionality_reduction.html#exercises",
    "title": "Dimensionality reduction",
    "section": "Exercises",
    "text": "Exercises\nLoad the seu dataset you have created yesterday:\n\nseu &lt;- readRDS(\"seu_day1-3.rds\")\n\nAnd load the following packages:\n\nlibrary(Seurat)\n\nAttaching SeuratObject\n\n\nAttaching sp\n\n\nOnce the data is normalized, scaled and variable features have been identified, we can start to reduce the dimensionality of the data. For the PCA, by default, only the previously determined variable features are used as input, but can be defined using features argument if you wish to specify a vector of genes. The PCA will only be run on the variable features, that you can check with VariableFeatures(seu).\n\nseu &lt;- Seurat::RunPCA(seu)\n\nTo view the PCA plot:\n\nSeurat::DimPlot(seu, reduction = \"pca\")\n\n\n\n\nWe can colour the PCA plot according to any factor that is present in @meta.data, or for any gene. For example we can take the column percent.globin:\n\nSeurat::FeaturePlot(seu, reduction = \"pca\", features = \"percent.globin\")\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that we used a different plotting function here: FeaturePlot. The difference between DimPlot and FeaturePlot is that the first allows you to color the points in the plot according to a grouping variable (e.g. sample) while the latter allows you to color the points according to a continuous variable (e.g. gene expression)."
  },
  {
    "objectID": "day2/day2-1_dimensionality_reduction.html#exercise",
    "href": "day2/day2-1_dimensionality_reduction.html#exercise",
    "title": "Dimensionality reduction",
    "section": "Exercise",
    "text": "Exercise\nGenerate a PCA plot where color is according to counts of a gene (i.e. gene expression). For example, you can take HBA1 (alpha subunit of hemoglobin), or one of the most variable genes (e.g. IGKC)."
  },
  {
    "objectID": "day2/day2-2_integration.html",
    "href": "day2/day2-2_integration.html",
    "title": "Integration",
    "section": "",
    "text": "Let’s have a look at the UMAP again. Although cells of different samples are shared amongst ‘clusters’, you can still see seperation within the clusters:\n\nSeurat::DimPlot(seu, reduction = \"umap\")\n\n\n\n\nTo perform the integration, we split our object by sample, resulting into a list with each sample as an element. We perform standard preprocessing (log-normalization), and identify variable features individually for each dataset based on a variance stabilizing transformation (\"vst\").\n\nseu_list &lt;- Seurat::SplitObject(seu, split.by = \"orig.ident\")\n\nfor (i in 1:length(seu_list)) {\n    seu_list[[i]] &lt;- Seurat::NormalizeData(seu_list[[i]])\n    seu_list[[i]] &lt;- Seurat::FindVariableFeatures(seu_list[[i]], selection.method = \"vst\", nfeatures = 2000,\n        verbose = FALSE)\n}\n\nAfter this, we prepare the integration by selecting integration anchors:\n\nseu_anchors &lt;- Seurat::FindIntegrationAnchors(object.list = seu_list, dims = 1:25)\n\nAnd finally perform the integration:\n\nseu_int &lt;- Seurat::IntegrateData(anchorset = seu_anchors, dims = 1:25)\n\nAfter running IntegrateData, the Seurat object will contain an additional element of class Assay with the integrated (or ‘batch-corrected’) expression matrix. This new Assay is called integrated, and exists next to the already existing RNA element with class Assay.\n\n\n\n\n\n\nWarning\n\n\n\nUse the Assay integrated only for clustering and visualisation. It will give unexpected results during e.g. differential gene expression analysis. Therefore, use the RNA element for other analyses.\n\n\nWe can then use this new integrated matrix for clustering and visualization. Now, we can scale the integrated data, run PCA, and visualize the results with UMAP.\n\n\n\n\n\n\nNote\n\n\n\nNo need to re-run FindVariableFeatures, these were automatically set by calling IntegrateData.\n\n\nFirst, switch the default Assay to integrated (in stead of RNA).\n\nSeurat::DefaultAssay(seu_int) &lt;- \"integrated\"\n\n\n\n\n\n\n\nExercise\n\n\n\nIn order to redo the clustering, scale the integrated data, run the PCA and the UMAP again (using the function ScaleData, RunPCA and RunUMAP). After that, generate the UMAP plot. Did the integration perform well?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nPerforming the scaling, PCA and UMAP:\n\nseu_int &lt;- Seurat::ScaleData(seu_int)\nseu_int &lt;- Seurat::RunPCA(seu_int, npcs = 30)\nseu_int &lt;- Seurat::RunUMAP(seu_int, reduction = \"pca\", dims = 1:25)\n\nPlotting the UMAP:\n\nSeurat::DimPlot(seu_int, reduction = \"umap\")\n\n\n\n\n\n\n\n\n\nsaveRDS(seu_int, \"seu_day2-2.rds\")\n\nClear your environment:\n\nrm(list = ls())\ngc()\n.rs.restartR()"
  },
  {
    "objectID": "day2/day2-2_integration.html#exercises",
    "href": "day2/day2-2_integration.html#exercises",
    "title": "Integration",
    "section": "",
    "text": "Let’s have a look at the UMAP again. Although cells of different samples are shared amongst ‘clusters’, you can still see seperation within the clusters:\n\nSeurat::DimPlot(seu, reduction = \"umap\")\n\n\n\n\nTo perform the integration, we split our object by sample, resulting into a list with each sample as an element. We perform standard preprocessing (log-normalization), and identify variable features individually for each dataset based on a variance stabilizing transformation (\"vst\").\n\nseu_list &lt;- Seurat::SplitObject(seu, split.by = \"orig.ident\")\n\nfor (i in 1:length(seu_list)) {\n    seu_list[[i]] &lt;- Seurat::NormalizeData(seu_list[[i]])\n    seu_list[[i]] &lt;- Seurat::FindVariableFeatures(seu_list[[i]], selection.method = \"vst\", nfeatures = 2000,\n        verbose = FALSE)\n}\n\nAfter this, we prepare the integration by selecting integration anchors:\n\nseu_anchors &lt;- Seurat::FindIntegrationAnchors(object.list = seu_list, dims = 1:25)\n\nAnd finally perform the integration:\n\nseu_int &lt;- Seurat::IntegrateData(anchorset = seu_anchors, dims = 1:25)\n\nAfter running IntegrateData, the Seurat object will contain an additional element of class Assay with the integrated (or ‘batch-corrected’) expression matrix. This new Assay is called integrated, and exists next to the already existing RNA element with class Assay.\n\n\n\n\n\n\nWarning\n\n\n\nUse the Assay integrated only for clustering and visualisation. It will give unexpected results during e.g. differential gene expression analysis. Therefore, use the RNA element for other analyses.\n\n\nWe can then use this new integrated matrix for clustering and visualization. Now, we can scale the integrated data, run PCA, and visualize the results with UMAP.\n\n\n\n\n\n\nNote\n\n\n\nNo need to re-run FindVariableFeatures, these were automatically set by calling IntegrateData.\n\n\nFirst, switch the default Assay to integrated (in stead of RNA).\n\nSeurat::DefaultAssay(seu_int) &lt;- \"integrated\"\n\n\n\n\n\n\n\nExercise\n\n\n\nIn order to redo the clustering, scale the integrated data, run the PCA and the UMAP again (using the function ScaleData, RunPCA and RunUMAP). After that, generate the UMAP plot. Did the integration perform well?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nPerforming the scaling, PCA and UMAP:\n\nseu_int &lt;- Seurat::ScaleData(seu_int)\nseu_int &lt;- Seurat::RunPCA(seu_int, npcs = 30)\nseu_int &lt;- Seurat::RunUMAP(seu_int, reduction = \"pca\", dims = 1:25)\n\nPlotting the UMAP:\n\nSeurat::DimPlot(seu_int, reduction = \"umap\")\n\n\n\n\n\n\n\n\n\nsaveRDS(seu_int, \"seu_day2-2.rds\")\n\nClear your environment:\n\nrm(list = ls())\ngc()\n.rs.restartR()"
  },
  {
    "objectID": "day2/day2-4_cell_annotation.html",
    "href": "day2/day2-4_cell_annotation.html",
    "title": "Cell annotation",
    "section": "",
    "text": "Download the presentation\n\nReview on automated cell annotation"
  },
  {
    "objectID": "day2/day2-4_cell_annotation.html#material",
    "href": "day2/day2-4_cell_annotation.html#material",
    "title": "Cell annotation",
    "section": "",
    "text": "Download the presentation\n\nReview on automated cell annotation"
  },
  {
    "objectID": "day2/day2-4_cell_annotation.html#exercises",
    "href": "day2/day2-4_cell_annotation.html#exercises",
    "title": "Cell annotation",
    "section": "Exercises",
    "text": "Exercises\nLoad the following packages:\n\nlibrary(celldex)\nlibrary(SingleR)\n\nIn the last exercise we saw that probably clustering at a resolution of 0.3 gave the most sensible results. Let’s therefore set the default identity of each cell based on this clustering:\n\nseu_int &lt;- Seurat::SetIdent(seu_int, value = seu_int$integrated_snn_res.0.3)\n\n\n\n\n\n\n\nNote\n\n\n\nFrom now on, grouping (e.g. for plotting) is done by the active identity (set at @active.ident) by default.\n\n\nDuring cell annotation we will use the original count data (not the integrated data):\n\nDefaultAssay(seu_int) &lt;- \"RNA\"\n\nBased on the UMAP we have generated, we can visualize expression for a gene in each cluster:\n\nSeurat::FeaturePlot(seu_int, \"HBA1\")\n\n\n\n\nBased on expression of sets of genes you can do a manual cell type annotation. If you know the marker genes for some cell types, you can check whether they are up-regulated in one or the other cluster. Here we have some marker genes for two different cell types:\n\ntcell_genes &lt;- c(\"IL7R\", \"LTB\", \"TRAC\", \"CD3D\")\nmonocyte_genes &lt;- c(\"CD14\", \"CST3\", \"CD68\", \"CTSS\")\n\nLet’s have a look at the expression of the four T cell genes:\n\nSeurat::FeaturePlot(seu_int, tcell_genes, ncol=2)\n\n\n\n\nThese cells are almost all in cluster 0 and 8. Which becomes clearer when looking at the violin plot:\n\nSeurat::VlnPlot(seu_int,\n                features = tcell_genes,\n                ncol = 2)\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nHave a look at the monocyte genes as well. Which clusters contain probably monocytes?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nSeurat::FeaturePlot(seu_int, monocyte_genes, ncol=2)\n\n\n\n\n\nSeurat::VlnPlot(seu_int,\n                features = monocyte_genes,\n                ncol = 2)\n\n\n\n\n\n\n\nWe can also automate this with the function AddModuleScore. For each cell, an expression score for a group of genes is calcuated:\n\nseu_int &lt;- Seurat::AddModuleScore(seu_int,\n                              features = list(tcell_genes),\n                              name = \"tcell_genes\")\n\n\n\n\n\n\n\nExercise\n\n\n\nAfter running AddModuleScore, a column was added to seu_int@meta.data.\nA. What is the name of that column? What kind of data is in there?\nB. Generate a UMAP with color accoding to this column and a violinplot grouped by cluster. Is this according to what we saw in the previous exercise?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nA. The new column is called tcell_genes1. It contains the module score for each cell (which is basically the average expression of the set of genes).\nB. You can plot the UMAP with\n\nSeurat::FeaturePlot(seu_int, \"tcell_genes1\")\n\n\n\n\nWhich indeed shows these genes are mainly expressed in clusters 0 and 8:\n\nSeurat::VlnPlot(seu_int,\n                \"tcell_genes1\")\n\n\n\n\n\n\n\nAnnotating cells according to cycling phase\nBased on the same principle, we can also annotate cell cycling state. The function CellCycleScore uses AddModuleScore to get a score for the G2/M and S phase (the mitotic phases in which cell is cycling). In addition, CellCycleScore assigns each cell to either the G2/M, S or G1 phase.\nFirst we extract the built-in genes for cell cycling:\n\ns.genes &lt;- Seurat::cc.genes.updated.2019$s.genes\ng2m.genes &lt;- Seurat::cc.genes.updated.2019$g2m.genes\n\nNow we run the function:\n\nseu_int &lt;- Seurat::CellCycleScoring(seu_int,\n                                     s.features = s.genes,\n                                     g2m.features = g2m.genes)\n\nAnd we can visualize the annotations:\n\nSeurat::DimPlot(seu_int, group.by = \"Phase\")\n\n\n\n\nBased on your application, you can try to regress out the cell cycling scores at the step of scaling. Reasons for doing that could be:\n\nMerging cycling and non-cycling cells of the same type in one cluster\nMerging G2/M and S phase in one cluster\n\n\n\n\n\n\n\nNote\n\n\n\nNote that correcting for cell cycling is performed at the scaling step. It will therefore only influence analyses that use scaled data, like dimensionality reduction and clustering. For e.g. differential gene expression testing, we use the raw original counts (not scaled).\n\n\nHere, we choose not to regress out either of them. Because we are looking at developing cells, we might be interested to keep cycling cells seperated. In addition, the G2/M and S phases seem to be in the same clusters. More info on correcting for cell cycling here.\nCell type annotation using SingleR\n\nTo do a fully automated annoation, we need a reference dataset of primary cells. Any reference could be used. The package scRNAseq in Bioconductor includes several scRNAseq datasets that can be used as reference to SingleR. One could also use a reference made of bulk RNA seq data. Here we are using the a hematopoietic reference dataset from celldex. Check out what’s in there:\n\nref &lt;- celldex::NovershternHematopoieticData()\nclass(ref)\ntable(ref$label.main)\n\n\n\n\n\n\n\nNote\n\n\n\nYou will be asked whether to create the directory /home/rstudio/.cache/R/ExperimentHub. Type yes as a response.\n\n\n\n\n\n\n\n\nNote\n\n\n\nYou can find more information on different reference datasets at the celldex documentation\n\n\nNow SingleR compares our normalized count data to a reference set, and finds the most probable annation:\n\nseu_int_SingleR &lt;- SingleR::SingleR(test = Seurat::GetAssayData(seu_int, slot = \"data\"),\n                                ref = ref,\n                                labels = ref$label.main)\n\nSee what’s in there by using head:\n\nhead(seu_int_SingleR)\n\nDataFrame with 6 rows and 5 columns\n                                                   scores    first.labels\n                                                 &lt;matrix&gt;     &lt;character&gt;\nPBMMC-1_AAACCTGCAGACGCAA-1 0.216202:0.197296:0.086435:...         B cells\nPBMMC-1_AAACCTGTCATCACCC-1 0.143005:0.129582:0.170521:...    CD8+ T cells\nPBMMC-1_AAAGATGCATAAAGGT-1 0.113423:0.196264:0.111341:...       Monocytes\nPBMMC-1_AAAGCAAAGCAGCGTA-1 0.166749:0.168504:0.239303:...    CD4+ T cells\nPBMMC-1_AAAGCAACAATAACGA-1 0.102549:0.103979:0.178762:...    CD8+ T cells\nPBMMC-1_AAAGCAACATCAGTCA-1 0.181526:0.147693:0.115841:... Erythroid cells\n                                tuning.scores          labels   pruned.labels\n                                  &lt;DataFrame&gt;     &lt;character&gt;     &lt;character&gt;\nPBMMC-1_AAACCTGCAGACGCAA-1 0.208945:0.0618382         B cells         B cells\nPBMMC-1_AAACCTGTCATCACCC-1 0.184068:0.1086988    CD8+ T cells    CD8+ T cells\nPBMMC-1_AAAGATGCATAAAGGT-1 0.231595:0.1041421       Monocytes       Monocytes\nPBMMC-1_AAAGCAAAGCAGCGTA-1 0.181474:0.0969475    CD4+ T cells    CD4+ T cells\nPBMMC-1_AAAGCAACAATAACGA-1 0.192312:0.1315436    CD8+ T cells    CD8+ T cells\nPBMMC-1_AAAGCAACATCAGTCA-1 0.323945:0.2182315 Erythroid cells Erythroid cells\n\n\nVisualize singleR score quality scores:\n\nSingleR::plotScoreHeatmap(seu_int_SingleR)\n\n\n\n\n\nSingleR::plotDeltaDistribution(seu_int_SingleR)\n\nWarning: Groups with fewer than two data points have been dropped.\n\n\nWarning in max(data$density): no non-missing arguments to max; returning -Inf\n\n\nWarning: Computation failed in `stat_ydensity()`:\nreplacement has 1 row, data has 0\n\n\n\n\n\nThere are some annotations that contain only a few cells. They are usually not of interest, and they clogg our plots. Therefore we remove them from the annotation:\n\nsingleR_labels &lt;- seu_int_SingleR$labels\nt &lt;- table(singleR_labels)\nother &lt;- names(t)[t &lt; 10]\nsingleR_labels[singleR_labels %in% other] &lt;- \"none\"\n\nIn order to visualize it in our UMAP, we have to add the annotation to seu_int@meta.data:\n\nseu_int$SingleR_annot &lt;- singleR_labels\n\nWe can plot the annotations in the UMAP. Here, we use a different package for plotting (dittoSeq) as it has a bit better default coloring, and some other plotting functionality we will use later on.\n\ndittoSeq::dittoDimPlot(seu_int, \"SingleR_annot\", size = 0.7)\n\n\n\n\nWe can check out how many cells per sample we have for each annotated cell type:\n\ndittoSeq::dittoBarPlot(seu_int, var = \"SingleR_annot\", group.by = \"orig.ident\")\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nCompare our manual annotation (based on the set of T cell genes) to the annotation with SingleR. Do they correspond?\n\n\n\nYou can for example use the plotting function dittoBarPlot to visualize the cell types according to cluster (use integrated_snn_res.0.3 in stead of orig.ident))\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nWe can have a look at the mean module score for each SingleR annotation like this:\n\ndittoSeq::dittoBarPlot(seu_int, \n                   var = \"SingleR_annot\", \n                   group.by = \"integrated_snn_res.0.3\")\n\n\n\n\nHere, you can see that cluster 0 and 8 contain cells annotated as T cells (CD4+ and CD8+).\n\n\n\nSave the dataset and clear environment\nNow, save the dataset so you can use it tomorrow:\n\nsaveRDS(seu_int, \"seu_day2-4.rds\")\n\nClear your environment:\n\nrm(list = ls())\ngc()\n.rs.restartR()"
  },
  {
    "objectID": "precourse_preparations.html",
    "href": "precourse_preparations.html",
    "title": "Precourse preparations",
    "section": "",
    "text": "Participants should already have a basic knowledge in Next Generation Sequencing (NGS) techniques, or have already followed the course NGS - Quality control, Alignment, Visualisation. Knowledge in RNA sequencing is a plus. A basic knowledge of the R statistical software is required. Test your R skills with the quiz here, before registering."
  },
  {
    "objectID": "precourse_preparations.html#required-competences",
    "href": "precourse_preparations.html#required-competences",
    "title": "Precourse preparations",
    "section": "",
    "text": "Participants should already have a basic knowledge in Next Generation Sequencing (NGS) techniques, or have already followed the course NGS - Quality control, Alignment, Visualisation. Knowledge in RNA sequencing is a plus. A basic knowledge of the R statistical software is required. Test your R skills with the quiz here, before registering."
  },
  {
    "objectID": "precourse_preparations.html#software",
    "href": "precourse_preparations.html#software",
    "title": "Precourse preparations",
    "section": "Software",
    "text": "Software\nAttendees should have a Wi-Fi enabled computer. An online R and RStudio environment will be provided. However, in case you wish to perform the practical exercises on your own computer, please take a moment to install the following before the course:\n\nR version &gt; 4.0.\nLatest RStudio version, the free version is perfectly fine.\nThe R packages necessary for the course. Find the script to install them here."
  },
  {
    "objectID": "course_schedule.html",
    "href": "course_schedule.html",
    "title": "Course schedule",
    "section": "",
    "text": "Note\n\n\n\nApart from the starting time the time schedule is indicative. Because we can not plan a course by the minute, in practice the time points will deviate."
  },
  {
    "objectID": "course_schedule.html#day-1",
    "href": "course_schedule.html#day-1",
    "title": "Course schedule",
    "section": "Day 1",
    "text": "Day 1\n\n\n\nblock\nstart\nend\nsubject\n\n\n\n\nintroduction\n9:15 AM\n9:30 AM\nIntroduction\n\n\nblock 1\n9:30 AM\n10:30 AM\nIntroduction scRNAseq\n\n\n\n10:30 AM\n11:00 AM\nBREAK\n\n\nblock 2\n11:00 AM\n12:30 PM\nAnalysis tools and QC\n\n\n\n12:30 PM\n1:30 PM\nBREAK\n\n\nblock 3\n1:30 PM\n3:00 PM\nAnalysis tools and QC\n\n\n\n3:00 PM\n3:30 PM\nBREAK\n\n\nblock 4\n3:30 PM\n5:00 PM\nNormalization and scaling"
  },
  {
    "objectID": "course_schedule.html#day-2",
    "href": "course_schedule.html#day-2",
    "title": "Course schedule",
    "section": "Day 2",
    "text": "Day 2\n\n\n\nblock\nstart\nend\nsubject\n\n\n\n\nblock 1\n9:15 AM\n10:30 AM\nIntegration and Dimensionality reduction\n\n\n\n10:30 AM\n11:00 AM\nBREAK\n\n\nblock 2\n11:00 AM\n12:30 PM\nFurther exercises\n\n\n\n12:30 PM\n1:30 PM\nBREAK\n\n\nblock 3\n1:30 PM\n3:00 PM\nClustering\n\n\n\n3:00 PM\n3:30 PM\nBREAK\n\n\nblock 4\n3:30 PM\n5:00 PM\nCell annotation"
  },
  {
    "objectID": "course_schedule.html#day-3",
    "href": "course_schedule.html#day-3",
    "title": "Course schedule",
    "section": "Day 3",
    "text": "Day 3\n\n\n\nblock\nstart\nend\nsubject\n\n\n\n\nblock 1\n9:15 AM\n10:30 AM\nDifferential gene expression\n\n\n\n10:30 AM\n11:00 AM\nBREAK\n\n\nblock 2\n11:00 AM\n12:30 PM\nEnrichment analysis\n\n\n\n12:30 PM\n1:30 PM\nBREAK\n\n\nblock 3\n1:30 PM\n3:00 PM\nTrajectory analysis\n\n\n\n3:00 PM\n3:30 PM\nBREAK\n\n\nblock 4\n3:30 PM\n5:00 PM\nAdvanced analyses"
  },
  {
    "objectID": "index.html#teachers",
    "href": "index.html#teachers",
    "title": "SIB course Single Cell Transcriptomics",
    "section": "Teachers",
    "text": "Teachers\n\nTania Wyss ORCiD\nRachel Marcone-Jeitziner ORCiD\nGeert van Geest ORCiD"
  },
  {
    "objectID": "index.html#authors",
    "href": "index.html#authors",
    "title": "SIB course Single Cell Transcriptomics",
    "section": "Authors",
    "text": "Authors\n\nTania Wyss ORCiD\nRachel Marcone-Jeitziner ORCiD\nGeert van Geest ORCiD\nPatricia Palagi ORCiD"
  },
  {
    "objectID": "index.html#attribution",
    "href": "index.html#attribution",
    "title": "SIB course Single Cell Transcriptomics",
    "section": "Attribution",
    "text": "Attribution\nParts of this course are inspired by the Broad Institute Single Cell Workshop, the CRUK CI Introduction to single-cell RNA-seq data analysis course and courses previously developed by Walid Gharib at SIB."
  },
  {
    "objectID": "index.html#license-copyright",
    "href": "index.html#license-copyright",
    "title": "SIB course Single Cell Transcriptomics",
    "section": "License & copyright",
    "text": "License & copyright\nLicense: CC BY-SA 4.0\nCopyright: SIB Swiss Institute of Bioinformatics"
  },
  {
    "objectID": "index.html#learning-outcomes",
    "href": "index.html#learning-outcomes",
    "title": "SIB course Single Cell Transcriptomics",
    "section": "Learning outcomes",
    "text": "Learning outcomes\n\nGeneral learning outcomes\nAfter this course, you will be able to:\n\ndistinguish advantages and pitfalls of scRNAseq\ndesign your own scRNA-seq experiment\napply a downstream analysis using R\n\n\n\nLearning outcomes explained\nTo reach the general learning outcomes above, we have set a number of smaller learning outcomes. Each chapter starts with these smaller learning outcomes. Use these at the start of a chapter to get an idea what you will learn. Use them also at the end of a chapter to evaluate whether you have learned what you were expected to learn."
  },
  {
    "objectID": "index.html#learning-experiences",
    "href": "index.html#learning-experiences",
    "title": "SIB course Single Cell Transcriptomics",
    "section": "Learning experiences",
    "text": "Learning experiences\nTo reach the learning outcomes we will use lectures, exercises, polls and group work. During exercises, you are free to discuss with other participants. During lectures, focus on the lecture only.\n\nExercises\nEach block has practical work involved. Some more than others. The practicals are subdivided into chapters, and we’ll have a (short) discussion after each chapter. All answers to the practicals are incorporated, but they are hidden. Do the exercise first by yourself, before checking out the answer. If your answer is different from the answer in the practicals, try to figure out why they are different."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "day1/day1-1_setup.html",
    "href": "day1/day1-1_setup.html",
    "title": "Setup",
    "section": "",
    "text": "Download the presentation"
  },
  {
    "objectID": "day1/day1-1_setup.html#material",
    "href": "day1/day1-1_setup.html#material",
    "title": "Setup",
    "section": "",
    "text": "Download the presentation"
  },
  {
    "objectID": "day1/day1-1_setup.html#exercises",
    "href": "day1/day1-1_setup.html#exercises",
    "title": "Setup",
    "section": "Exercises",
    "text": "Exercises\nLogin and set up\nChoose one of the following:\n\n\nEnrolled: if you are enrolled in a course with a teacher\n\nOwn installation: if you want to install packages on your own local Rstudio installation\n\nDocker: if you want to use the docker image locally\n\nrenkulab.io if you want to easily deploy the environment outside the course\n\n\n\nEnrolled\nOwn installation\nDocker\nrenkulab.io\n\n\n\nLog in to Rstudio server with the provided link, username and password.\n\n\nInstall the required packages using the script install_packages.R\n\n\nWith docker, you can use exactly the same environment as we use in the enrolled course, but than running locally.\nIn the video below there’s a short tutorial on how to set up a docker container for this course. Note that you will need administrator rights, and that if you are using Windows, you need the latest version of Windows 10.\n\nThe command to run the environment required for this course looks like this (in a terminal):\n\n\n\n\n\n\nModify the script\n\n\n\nThe home directory within the container is mounted to your current directory ($PWD), if you want to change this behaviour, modify the path after -v to the working directory on your computer before running it.\n\n\n\ndocker run \\\n--rm \\\n-p 8787:8787 \\\n-e PASSWORD=test \\\n-v $PWD:/home/rstudio \\\ngeertvangeest/single-cell-rstudio:latest\n\nIf this command has run successfully, approach Rstudio server like this:\nhttp://localhost:8787\nCopy this URL into your browser. If you used the snippet above, the credentials will be:\n\n\nUsername: rstudio\n\n\nPassword: test\n\n\nGreat! Now you will be able to use Rstudio with all required installations.\n\n\n\n\n\n\nAbout the options\n\n\n\nThe option -v mounts a local directory in your computer to the directory /home/rstudio in the docker container (‘rstudio’ is the default user for Rstudio containers). In that way, you have files available both in the container and on your computer. Use this directory on your computer. Change the first path to a path on your computer that you want to use as a working directory.\nThe part geertvangeest/single-cell-rstudio:latest is the image we are going to load into the container. The image contains all the information about software and dependencies needed for this course. When you run this command for the first time it will download the image. Once it’s on your computer, it will start immediately.\n\n\n\n\nTo simply run the environment, you can use renku. You can find the repository (including the image) here: https://renkulab.io/projects/geert.vangeest/single-cell-training/.\n\n\n\nCreate a project\nNow that you have access to an environment with the required installations, we will set up a project in a new directory. On the top right choose the button Project (None) and select New Project…\n\nContinue by choosing New Directory\n\nAs project type select New Project\n\nFinally, type in the project name. This should be single_cell_course. Finish by clicking Create Project.\n\nNow that we have setup a project and a project directory (it is in /home/rstudio/single_cell_course), we can download the data that is required for this course. We will use the built-in terminal of Rstudio. To do this, select the Terminal tab:\n\nDownloading the course data\nTo download and extract the dataset, copy-paste these commands inside the terminal tab:\n\nwget https://single-cell-transcriptomics.s3.eu-central-1.amazonaws.com/course_data.tar.gz\ntar -xvf course_data.tar.gz\nrm course_data.tar.gz\n\n\n\n\n\n\n\nIf on Windows\n\n\n\nIf you’re using Windows, you can directly open the link in your browser, and downloading will start automatically. Unpack the tar.gz file in the directory where you want to work in during the course.\n\n\nHave a look at the data directory you have downloaded. It should contain the following:\ncourse_data\n├── count_matrices\n│   ├── ETV6-RUNX1_1\n│   │   └── outs\n│   │       └── filtered_feature_bc_matrix\n│   │           ├── barcodes.tsv.gz\n│   │           ├── features.tsv.gz\n│   │           └── matrix.mtx.gz\n│   ├── ETV6-RUNX1_2\n│   │   └── outs\n│   │       └── filtered_feature_bc_matrix\n│   │           ├── barcodes.tsv.gz\n│   │           ├── features.tsv.gz\n│   │           └── matrix.mtx.gz\n│   ├── ETV6-RUNX1_3\n│   │   └── outs\n│   │       └── filtered_feature_bc_matrix\n│   │           ├── barcodes.tsv.gz\n│   │           ├── features.tsv.gz\n│   │           └── matrix.mtx.gz\n│   ├── PBMMC_1\n│   │   └── outs\n│   │       └── filtered_feature_bc_matrix\n│   │           ├── barcodes.tsv.gz\n│   │           ├── features.tsv.gz\n│   │           └── matrix.mtx.gz\n│   ├── PBMMC_2\n│   │   └── outs\n│   │       └── filtered_feature_bc_matrix\n│   │           ├── barcodes.tsv.gz\n│   │           ├── features.tsv.gz\n│   │           └── matrix.mtx.gz\n│   └── PBMMC_3\n│       └── outs\n│           └── filtered_feature_bc_matrix\n│               ├── barcodes.tsv.gz\n│               ├── features.tsv.gz\n│               └── matrix.mtx.gz\n└── reads\n    ├── ETV6-RUNX1_1_S1_L001_I1_001.fastq.gz\n    ├── ETV6-RUNX1_1_S1_L001_R1_001.fastq.gz\n    └── ETV6-RUNX1_1_S1_L001_R2_001.fastq.gz\n\n20 directories, 21 files\nThis data comes from:\nCaron M, St-Onge P, Sontag T, Wang YC, Richer C, Ragoussis I, et al. Single-cell analysis of childhood leukemia reveals a link between developmental states and ribosomal protein expression as a source of intra-individual heterogeneity. Scientific Reports. 2020;10:1–12. Available from: http://dx.doi.org/10.1038/s41598-020-64929-x\nWe will use the reads to showcase the use of cellranger count. The directory contains only reads from chromosome 21 and 22 of one sample (ETV6-RUNX1_1). The count matrices are output of cellranger count, and we will use those for the other exercises in R."
  },
  {
    "objectID": "day1/day1-2_analysis_tools_qc.html",
    "href": "day1/day1-2_analysis_tools_qc.html",
    "title": "Analysis tools and QC",
    "section": "",
    "text": "Learning outcomes\n\n\n\nAfter having completed this chapter you will be able to:\n\nLoad single cell data into R\nExplain the basic structure of a Seurat object and extract count data and metadata\nCalculate and visualize quality measures based on:\n\nmitochondrial genes\nribosomal genes\nhemoglobin genes\nrelative gene expression\n\n\nInterpret the above quality measures per cell.\nPerform cell filtering based on quality thresholds"
  },
  {
    "objectID": "day1/day1-2_analysis_tools_qc.html#material",
    "href": "day1/day1-2_analysis_tools_qc.html#material",
    "title": "Analysis tools and QC",
    "section": "Material",
    "text": "Material\nDownload the presentation"
  },
  {
    "objectID": "day1/day1-2_analysis_tools_qc.html#exercises",
    "href": "day1/day1-2_analysis_tools_qc.html#exercises",
    "title": "Analysis tools and QC",
    "section": "Exercises",
    "text": "Exercises\nLoading scRNAseq data\nThe next step after the generation of the count matrices with cellranger count, is the data analysis. The R package Seurat is currently the most popular software to do this. To start working with Seurat you can load it into your environment like this:\n\nlibrary(Seurat)\n\n\n\n\n\n\n\nTip: make an R script\n\n\n\nYou could type and copy-paste the commands of these exercises directly in the console. However, that makes it hard to track what you have done. In addition, it can be nice to add comments to your code, so you can read back why you have made certain choices. In order to do that, do not write commands in the console, but write them in a script, and send them to the console with ^ Ctrl + ⏎ Enter (Windows) or ⌘ Command + ⏎ Enter (MacOS).\n\n\nFirst, we will load a file specifying the different samples, and create an object specifying the location of the count data:\n\nsample_info &lt;- read.csv(\"course_data/sample_info_course.csv\")\ndatadirs &lt;- file.path(\"course_data\", \"count_matrices\", sample_info$SampleName,\n                      \"outs\", \"filtered_feature_bc_matrix\")\nnames(datadirs) &lt;- gsub(\"_\", \"-\", sample_info$SampleName)\ndatadirs &lt;- datadirs[1:3]\n\nThe object datadirs is a named vector specifying the paths of the count directories for each sample:\n\n\n                                                             PBMMC-1 \n\"course_data/count_matrices/PBMMC_1/outs/filtered_feature_bc_matrix\" \n                                                             PBMMC-2 \n\"course_data/count_matrices/PBMMC_2/outs/filtered_feature_bc_matrix\" \n                                                             PBMMC-3 \n\"course_data/count_matrices/PBMMC_3/outs/filtered_feature_bc_matrix\" \n\n\nTo run through a typical Seurat analysis, we will use the files that are in the directory data/filtered_feature_bc_matrix. This directory is part of the output generated by cellranger. To load this data into R and generate a sparse matrix, run the following command:\n\nsparse_matrix &lt;- Seurat::Read10X(data.dir = datadirs)\n\nThis imports a raw count matrix. Have a look at the counts of the first 30 cells of three genes by running:\n\nsparse_matrix[c(\"PECAM1\", \"CD8A\", \"TSPAN1\"), 1:30]\n\n3 x 30 sparse Matrix of class \"dgCMatrix\"\n\n\n   [[ suppressing 30 column names 'PBMMC-1_AAACCTGCAGACGCAA-1', 'PBMMC-1_AAACCTGTCATCACCC-1', 'PBMMC-1_AAAGATGCATAAAGGT-1' ... ]]\n\n\n                                                                  \nPECAM1 . . . . . . . 1 . . . . 1 . . 1 . . . . . . . 1 . . . . . .\nCD8A   . 1 . . 1 . . . . . . . . . . . . . . . . . . . . . . . . .\nTSPAN1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\n\n\nYou will see many dots (zeros) and a few integers representing the counts per gene per cell.\nTo generate a Seurat object, we will run CreateSeuratObject. Note that while creating the object, we already do some mild filtering; we only import genes that are expressed in at least 3 cells, and we only import cells that have at least 100 different genes expressed:\n\nseu &lt;- Seurat::CreateSeuratObject(counts = sparse_matrix,\n                                  project = \"pbmmc\",\n                                  min.cells = 3,\n                                  min.features = 100)\n\nWarning: Feature names cannot have underscores ('_'), replacing with dashes\n('-')\n\n\n\n\n\n\n\n\nFunction notation with ::\n\n\n\nHere, we define the function together with its associated package. We do that by the syntax package::function. Of course, you can also call library(package), and only type the function name. Since we use many different packages in this course, it can be confusing which function comes from which package. Therefore, we chose to always associate the package with the called function.\n\n\n\n\n\n\n\n\nExercise\n\n\n\ncheck what’s in the seu object, by typing seu in the R console. How many features are in there? And how many cells?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nTyping seu should return:\n\n\nAn object of class Seurat \n18673 features across 6946 samples within 1 assay \nActive assay: RNA (18673 features, 0 variable features)\n\n\nThis means that we have 18673 genes (features) in there, and 6946 cells (samples)\n\n\n\nThe Seurat object\nThe seu object we have created has the class Seurat. The object contains multi-level slots and lists. Each Seurat object contains exactly the same slots that are specified in the image below (get slot descriptions by typing ?SeuratObject::Seurat). You can get the information inside a slot with @, in the same way as you would use the $ for lists (e.g. seu@meta.data will return the a data frame with information on each cell). Slots can be filled with other R objects, like lists, vectors, data frames or any other class. Here’s an overview of all slots that are in a Seurat object:\n\nIn addition to the original count table, the Seurat object can therefore store a lot of information that is generated during your analysis, like results of a normalization (@assays$RNA@data) a PCA or UMAP (@reductions) and the clustering (@graphs). It also tracks all the commands that have been used to generate the object in its current state (@commands). Therefore, while going through the analysis steps, the same object gets more and more of its slots filled. Because most Seurat functions return the input object + adjusted slots, we can use this syntax:\nseurat_object &lt;- Seurat::function(seurat_object)\nSo, the function takes an object as input and we assign it to an object with the same name. Meaning that we overwrite the object used as input. This is fine in many cases, because Seurat adds information to the input object, and returns is. We will use this syntax for the first time at Normalization and scaling.\n\n\n\n\n\n\nGetting specific information out of the Seurat object\n\n\n\nIn order to get specific data you can use the @ and $ symbols to browse through the objects. However, Seurat comes with a lot of convenience functions, that are easier to use. So, e.g. to get the raw count matrix, you could type seurat_object@assays$RNA@counts, however, this is equivalent to GetAssayData(object = seurat_object, slot = \"counts\"). More information on these convenience functions here.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nA. Have a look at the seu object by running View(seu). What is in there? What is stored in @active.ident?\nB. Have a look at the data.frame stored at seu@meta.data what kind of information is in there?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nAnswer A\nThere are many slots as described in the above figure. The slot @active.ident contains data specifying the samples, e.g. table(seu@active.ident) returns:\nPBMMC-1 PBMMC-2 PBMMC-3 \n1612    3105    2229 \nWhich are the number of cells per sample.\nAnswer B\nRunning head(seu@meta.data) returns:\n                            orig.ident nCount_RNA nFeature_RNA\nPBMMC-1_AAACCTGCAGACGCAA-1    PBMMC-1       2401          909\nPBMMC-1_AAACCTGTCATCACCC-1    PBMMC-1       3532          760\nPBMMC-1_AAAGATGCATAAAGGT-1    PBMMC-1       3972         1215\nPBMMC-1_AAAGCAAAGCAGCGTA-1    PBMMC-1       3569          894\nPBMMC-1_AAAGCAACAATAACGA-1    PBMMC-1       2982          730\nPBMMC-1_AAAGCAACATCAGTCA-1    PBMMC-1      22284         3108\nGiving you the names of three columns and a row for each cell:\n\n\norig_ident: the original identity (origin) of a cell.\n\nnCount_RNA: the number of reads assigned to a cell.\n\nnFeature_RNA: the number of expressed features (genes) per cell.\n\n\n\n\nLuckily, usually you do not have to dive into this structure to retrieve information. For example, information in the slot @meta.data can be retrieved and set by using $ or [[]].\n\n\n\n\n\n\nNote\n\n\n\nThere is a subtle difference here between $ and [[]]. While $ returns a vector of the column in @meta.data, [[]] returns a data.frame.\n\n\n\n\n\n\n\n\nExercise\n\n\n\nGenerate a histogram of the column nCount_RNA at seu@meta.data, with the base function hist.\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\n\nhist(seu$nCount_RNA)\n\n\n\n\nor\n\nhist(seu@meta.data$nCount_RNA)\n\n\n\n\n\n\n\nThere are also built-in functions to plot data from Seurat object, for example FeatureScatter. This function enables you easily draw a scatterplot from a Seurat object:\n\nSeurat::FeatureScatter(seu, feature1 = \"nCount_RNA\", feature2 = \"nFeature_RNA\")\n\n\n\n\nYou can find a nice overview of such functions here.\nVisualizing QC per cell and gene\nWhile generating the Seurat object, there were already some quality measures calculated for each cell, namely the total UMI counts per cell (nCount_RNA) and the total number of detected features per cell (nFeature_RNA). We can plot those in a violin plot and evaluate their distribution per sample:\n\nSeurat::VlnPlot(seu, features = c(\"nCount_RNA\",\n                                  \"nFeature_RNA\"))\n\n\n\n\nYou can see that there is quite a wide range for both. A cell with low number of detected features or counts might not give you a lot of information, while a high number of detected features/counts might point to doublets.\nSingle cells have often undergone sampling and/or dissociation and/or sorting. Therefore, there are often cells and genes in your dataset that cause variation due to technical reasons. In the following steps, we will visualize those and make decisions on whether or not to remove cells or genes with extreme values.\nWe will start with calculating the percentage of counts coming from transcript types:\n\n\nMitochondrial genes: If a cell membrane is damaged, it looses free RNA quicker compared to mitochondrial RNA, because the latter is part of the mitochondrion. A high relative amount of mitochondrial counts can therefore point to damaged cells (Lun et al. 2016).\n\nRibosomal genes: Are not rRNA (ribosomal RNA) but is mRNA that code for ribosomal proteins. They do not point to specific issues, but it can be good to have a look at their relative abundance. They can have biological relevance (e.g. Caron et al. 2020).\n\nHemoglobin genes: these transcripts are very abundant in erythrocytes. Depending on your application, you can expect ‘contamination’ of erythrocytes and select against it.\n\nIn order to have an idea about the relative counts of these type of genes in our dataset, we can calculate their expression as relative counts in each cell. We do that by selecting genes based on patterns (e.g. ^MT- matches with all gene names starting with MT, i.e. mitochondrial genes):\n\n# mitochondrial genes\nseu &lt;- Seurat::PercentageFeatureSet(seu, \n                                    pattern = \"^MT-\", \n                                    col.name = \"percent.mito\")\n\n# ribosomal genes\nseu &lt;- Seurat::PercentageFeatureSet(seu, \n                                    pattern = \"^RP[SL]\",\n                                    col.name = \"percent.ribo\")\n\n# hemoglobin genes (but not HBP)\nseu &lt;- Seurat::PercentageFeatureSet(seu,\n                                    pattern = \"^HB[^(P)]\",\n                                    col.name = \"percent.globin\")\n\n\n\n\n\n\n\nExercise\n\n\n\nRun the commands and check out the metadata data frame at seu@meta.data. What has changed?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nIf we type head(seu@meta.data) it returns:\n\n\n                           orig.ident nCount_RNA nFeature_RNA percent.mito\nPBMMC-1_AAACCTGCAGACGCAA-1    PBMMC-1       2401          909     2.540608\nPBMMC-1_AAACCTGTCATCACCC-1    PBMMC-1       3532          760     5.181200\nPBMMC-1_AAAGATGCATAAAGGT-1    PBMMC-1       3972         1215     4.934542\nPBMMC-1_AAAGCAAAGCAGCGTA-1    PBMMC-1       3569          894     3.250210\nPBMMC-1_AAAGCAACAATAACGA-1    PBMMC-1       2982          730     3.688799\nPBMMC-1_AAAGCAACATCAGTCA-1    PBMMC-1      22284         3108     3.181655\n                           percent.ribo percent.globin\nPBMMC-1_AAACCTGCAGACGCAA-1     28.65473      0.1665973\nPBMMC-1_AAACCTGTCATCACCC-1     55.03964      0.1981880\nPBMMC-1_AAAGATGCATAAAGGT-1     30.43807      0.3776435\nPBMMC-1_AAAGCAAAGCAGCGTA-1     55.02942      0.3642477\nPBMMC-1_AAAGCAACAATAACGA-1     54.49363      0.1006036\nPBMMC-1_AAAGCAACATCAGTCA-1     23.40693     36.9682283\n\n\nSo, the function PercentageFeatureSet adds a column to meta.data, specifying the percentage of counts for the specified gene sets.\n\n\n\nNow we can plot the distribution of these percentages in a violin plot:\n\nSeurat::VlnPlot(seu, features = c(\"percent.mito\",\n                                  \"percent.ribo\",\n                                  \"percent.globin\"))\n\n\n\n\nYou can see that PBMMC-2 is quite different from the two others, it has a group of cells with very low ribosomal counts and one with very high globin counts. Maybe these two percentages are negatively correlated? Let’s have a look, by plotting the two percentages against each other:\n\nSeurat::FeatureScatter(seu, \n                       feature1 = \"percent.globin\", \n                       feature2 = \"percent.ribo\")\n\n\n\n\n\n\n\n\n\n\nExercise\n\n\n\nAre they correlated? What kind of cells might have a high abundance of hemoglobin transcripts and low ribosomal transcripts?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nYes there is a negative correlation. Erythrocytes (red blood cells) have a high abundance of hemoglobin transcripts and low abundance of ribosomal transcripts. These are most likely erythroid cells, i.e. the cells predecessing erythrocytes in the bone marrow.\n\n\n\nWe can also evaluate the relative expression of other genes in our dataset, for example, the ones that are most highly expressed. Some very highly expressed genes might point to a technical cause, and we might consider to remove them. Below you will find a simple function to generate a boxplot of relative counts per gene per cell. Load it into your environment and run it on our seu object:\n\nlibrary(ggplot2)\nlibrary(Matrix)\nlibrary(Seurat)\n\nmost_expressed_boxplot &lt;- function(object, ngenes = 20){\n  \n  # matrix of raw counts\n  cts &lt;- Seurat::GetAssayData(object, assay = \"RNA\", slot = \"counts\")\n  \n  # get percentage/cell\n  cts &lt;- t(cts)/colSums(cts)*100\n  medians &lt;- apply(cts, 2, median)\n  \n  # get top n genes\n  most_expressed &lt;- order(medians, decreasing = T)[ngenes:1]\n  most_exp_matrix &lt;- as.matrix((cts[,most_expressed]))\n  \n  # prepare for plotting\n  most_exp_df &lt;- stack(as.data.frame(most_exp_matrix))\n  colnames(most_exp_df) &lt;- c(\"perc_total\", \"gene\")\n  \n  # boxplot with ggplot2\n  boxplot &lt;- ggplot(most_exp_df, aes(x=gene, y=perc_total)) +\n    geom_boxplot() +\n    coord_flip()\n  return(boxplot)\n}\n\nmost_expressed_boxplot(seu, 20)\n\n\n\n\nAs for most 10X based poly-A enriched single cell datasets, we find a relatively high expression of MALAT1. Many researchers choose to remove it, but it can have biological relevance (e.g. Shaat et al. 2021).\nCell filtering\nBased on the QC process we went through we can come to the following conclusions:\n\nThere are no cells with very high mitochondrial gene counts.\nThere are some cells with a hemoglobin and low ribosomal counts, and these are probably erythrocytes.\nThere are some cells with a very low and very high number of features. These might point to non-informative cells and doublets respectively.\nThe ‘usual suspect’ MALAT1 sometimes makes up a large part of the counts per cell. As we do not see any other suggestions of dying/stressed cells, we leave it in.\n\nIn this case, a sensible decision would be to do mild filtering on the number of features per cell and mitochondrial counts. We can leave the possible erythrocytes in for now, and see where they end up later during the dimensionality reduction.\nIn the M&M of the publication, the authors describe that they have used a threshold of &lt; 8% mitochondrial counts and &gt; 200 features per cell. To filter against possible doublets, here, we also filter out cells with &gt; 5000 detected features/cell. Filtering Seurat objects can be done with the subset method for class SeuratObject:\n\nseu &lt;- subset(seu, subset = nFeature_RNA &gt; 200 & \n                nFeature_RNA &lt; 5000 &\n                percent.mito &lt; 8)\n\nTo evaluate this did the trick we can visualize those parameters again in a violin plot:\n\nSeurat::VlnPlot(seu, features = c(\"nFeature_RNA\",\n                                  \"percent.mito\"))"
  },
  {
    "objectID": "day1/day1-3_normalization_scaling.html",
    "href": "day1/day1-3_normalization_scaling.html",
    "title": "Normalization and scaling",
    "section": "",
    "text": "Learning outcomes\n\n\n\nAfter having completed this chapter you will be able to:\n\nDescribe and perform standard procedures for normalization and scaling with the package Seurat\n\nSelect the most variable genes from a Seurat object for downstream analyses"
  },
  {
    "objectID": "day1/day1-3_normalization_scaling.html#material",
    "href": "day1/day1-3_normalization_scaling.html#material",
    "title": "Normalization and scaling",
    "section": "Material",
    "text": "Material\n\nSeurat vignette"
  },
  {
    "objectID": "day1/day1-3_normalization_scaling.html#exercises",
    "href": "day1/day1-3_normalization_scaling.html#exercises",
    "title": "Normalization and scaling",
    "section": "Exercises",
    "text": "Exercises\nNormalization\nAfter removing unwanted cells from the dataset, the next step is to normalize the data. By default, Seurat employs a global-scaling normalization method \"LogNormalize\" that normalizes the feature expression measurements for each cell by the total expression, multiplies this by a scale factor (10,000 by default), and log-transforms the result. Normalized values are stored in the “RNA” assay (as item of the @assay slot) of the seu object.\n\n\n\n\n\n\nExercise\n\n\n\nHave a look at the assay data before and after running NormalizeData(). Did it change?\n\n\n\n\n\n\n\n\nTip\n\n\n\nYou can extract assay data with the function Seurat::GetAssayData. By default, the slot data is used (inside the slot assay), containing normalized counts. Use Seurat::GetAssayData(seu, slot = \"counts\") to get the raw counts.\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nYou can check out some assay data with:\nSeurat::GetAssayData(seu)[1:10,1:10]  \nReturning:\n\n\n“Before normalization”\n“After normalization”\n\n\n\n10 x 10 sparse Matrix of class \"dgCMatrix\"\n[[ suppressing 10 column names ‘PBMMC-1_AAACCTGCAGACGCAA-1’, ‘PBMMC-1_AAACCTGTCATCACCC-1’, ‘PBMMC-1_AAAGATGCATAAAGGT-1’ ... ]]\n                                \nRP11-34P13.7  . . . . . . . . . .\nFO538757.3    . . . . . . . . . .\nFO538757.2    1 . . . . . 2 . . .\nAP006222.2    . . . . . . . . . .\nRP4-669L17.10 . . . . . . . . . .\nRP5-857K21.4  . . . . . . . . . .\nRP11-206L10.9 . . . . . . . . . .\nLINC00115     . . . . . . . . . .\nFAM41C        . . . . . . . . . .\nRP11-54O7.1   . . . . . . . . . .\n\n\n10 x 10 sparse Matrix of class \"dgCMatrix\"\n[[ suppressing 10 column names ‘PBMMC-1_AAACCTGCAGACGCAA-1’, ‘PBMMC-1_AAACCTGTCATCACCC-1’, ‘PBMMC-1_AAAGATGCATAAAGGT-1’ ... ]]\n                                            \nRP11-34P13.7  .        . . . . . .        . . .\nFO538757.3    .        . . . . . .        . . .\nFO538757.2    1.641892 . . . . . 1.381104 . . .\nAP006222.2    .        . . . . . .        . . .\nRP4-669L17.10 .        . . . . . .        . . .\nRP5-857K21.4  .        . . . . . .        . . .\nRP11-206L10.9 .        . . . . . .        . . .\nLINC00115     .        . . . . . .        . . .\nFAM41C        .        . . . . . .        . . .\nRP11-54O7.1   .        . . . . . .        . . .\n\n\n\n\n\n\n\nseu &lt;- Seurat::NormalizeData(seu,\n                     normalization.method = \"LogNormalize\",\n                     scale.factor = 10000)\n\n\n\n\n\n\n\nUpdating seu\n\n\n\nAs you might have noticed, this function takes the object seu as input, and it returns it to an object named seu. We can do this because the output of such calculations are added to the object, without loosing information.\n\n\nVariable features\nWe next calculate a subset of features that exhibit high cell-to-cell variation in the dataset (i.e, they are highly expressed in some cells, and lowly expressed in others). Focusing on these genes in downstream analysis helps to highlight biological signal in single-cell datasets. The procedure in Seurat models the mean-variance relationship inherent in single-cell data, and is implemented in the FindVariableFeatures() function. By default, 2,000 genes (features) per dataset are returned and these will be used in downstream analysis, like PCA.\n\nseu &lt;- Seurat::FindVariableFeatures(seu,\n                            selection.method = \"vst\",\n                            nfeatures = 2000)\n\nLet’s have a look at the 10 most variable genes:\n\n# Identify the 10 most highly variable genes\ntop10 &lt;- head(Seurat::VariableFeatures(seu), 10)\ntop10\n\n [1] \"IGKC\"   \"HBG2\"   \"IGHG3\"  \"IGHG1\"  \"JCHAIN\" \"HBG1\"   \"IGHA1\"  \"IGHGP\" \n [9] \"IGLC2\"  \"IGLC3\" \n\n\nWe can plot them in a nicely labeled scatterplot:\n\nvf_plot &lt;- Seurat::VariableFeaturePlot(seu)\nSeurat::LabelPoints(plot = vf_plot,\n            points = top10, repel = TRUE)\n\nWhen using repel, set xnudge and ynudge to 0 for optimal results\n\n\n\n\n\n\n\n\n\n\n\nMake sure the plotting window is large enough\n\n\n\nThe function LabelPoints will throw an error if the plotting window is to small. If you get an error, increase plotting window size in RStudio and try again.\n\n\nYou can see that most of the highly variables are antibody subunits (starting with IGH, IGL). Not very surprising since we look at bone marrow tissue. We can have a look later in which cells they are expressed.\nScaling\nNext, we apply scaling, a linear transformation that is a standard pre-processing step prior to dimensional reduction techniques like PCA. The ScaleData() function\n\nshifts the expression of each gene, so that the mean expression across cells is 0\nscales the expression of each gene, so that the variance across cells is 1\n\nThis step gives equal weight in downstream analyses, so that highly-expressed genes do not dominate. The results of this are stored in seu$RNA@scale.data\n\nseu &lt;- Seurat::ScaleData(seu,\n                 features = rownames(seu))\n\nCentering and scaling data matrix\n\n\n\n\n\n\n\n\nThe use of Seurat::SCTransform\n\n\n\nThe functions NormalizeData, VariableFeatures and ScaleData can be replaced by the function SCTransform. The latter uses a more sophisticated way to perform the normalization and scaling, and is argued to perform better. However, it is slower, and a bit less transparent compared to using the three separate functions. Therefore, we chose not to use SCTransform for the exercises.\n\n\n\n\n\n\n\n\nBonus exercise\n\n\n\nRun SCTransform on the seu object. Where is the output stored?\n\n\n\n\n\n\n\n\nAnswer\n\n\n\n\n\nYou can run it like so:\n\nseu &lt;- Seurat::SCTransform(seu)\n\nAnd it will add an extra assay to the object. names(seu@assays) returns:\n\n\n[1] \"RNA\" \"SCT\"\n\n\nMeaning that a whole new assay was added (including the sparse matrices with counts, normalized data and scaled data).\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\nRunning SCTransform will change @active.assay into SCT(in stead of RNA; check it with DefaultAssay(seu)). This assay is used as a default for following function calls. To change the active assay to RNA run:\n\nDefaultAssay(seu) &lt;- \"RNA\"\n\n\n\nSave the dataset and clear environment\nNow, save the dataset so you can use it tomorrow:\n\nsaveRDS(seu, \"seu_day1-3.rds\")\n\nClear your environment:\n\nrm(list = ls())\ngc()\n.rs.restartR()"
  }
]